// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: proto/rpc.proto

package arroyo_rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskCheckpointEventType int32

const (
	// got first barrier, waiting for alignment
	TaskCheckpointEventType_STARTED_ALIGNMENT TaskCheckpointEventType = 0
	// started checkpointing
	TaskCheckpointEventType_STARTED_CHECKPOINTING TaskCheckpointEventType = 1
	// operator finished setup
	TaskCheckpointEventType_FINISHED_OPERATOR_SETUP TaskCheckpointEventType = 2
	// finished the synchronous part of checkpointing
	TaskCheckpointEventType_FINISHED_SYNC TaskCheckpointEventType = 3
)

// Enum value maps for TaskCheckpointEventType.
var (
	TaskCheckpointEventType_name = map[int32]string{
		0: "STARTED_ALIGNMENT",
		1: "STARTED_CHECKPOINTING",
		2: "FINISHED_OPERATOR_SETUP",
		3: "FINISHED_SYNC",
	}
	TaskCheckpointEventType_value = map[string]int32{
		"STARTED_ALIGNMENT":       0,
		"STARTED_CHECKPOINTING":   1,
		"FINISHED_OPERATOR_SETUP": 2,
		"FINISHED_SYNC":           3,
	}
)

func (x TaskCheckpointEventType) Enum() *TaskCheckpointEventType {
	p := new(TaskCheckpointEventType)
	*p = x
	return p
}

func (x TaskCheckpointEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskCheckpointEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_rpc_proto_enumTypes[0].Descriptor()
}

func (TaskCheckpointEventType) Type() protoreflect.EnumType {
	return &file_proto_rpc_proto_enumTypes[0]
}

func (x TaskCheckpointEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskCheckpointEventType.Descriptor instead.
func (TaskCheckpointEventType) EnumDescriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{0}
}

type TableType int32

const (
	// Data is shared between all subtasks; basic key-value map
	TableType_Global TableType = 0
	// Memory key structure: [timestamp][dataflow_key]-> value
	// byte key structure: [dataflow_key][timestamp] -> value
	TableType_TimeKeyMap TableType = 1
	// Memory key structure: [dataflow_key][timestamp] -> value+
	// byte key structure: [dataflow_key][timestamp][incrementing_long] -> value
	TableType_KeyTimeMultiMap TableType = 2
)

// Enum value maps for TableType.
var (
	TableType_name = map[int32]string{
		0: "Global",
		1: "TimeKeyMap",
		2: "KeyTimeMultiMap",
	}
	TableType_value = map[string]int32{
		"Global":          0,
		"TimeKeyMap":      1,
		"KeyTimeMultiMap": 2,
	}
)

func (x TableType) Enum() *TableType {
	p := new(TableType)
	*p = x
	return p
}

func (x TableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_rpc_proto_enumTypes[1].Descriptor()
}

func (TableType) Type() protoreflect.EnumType {
	return &file_proto_rpc_proto_enumTypes[1]
}

func (x TableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableType.Descriptor instead.
func (TableType) EnumDescriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{1}
}

type TableDeleteBehavior int32

const (
	TableDeleteBehavior_None TableDeleteBehavior = 0
	// For a timestamped table, guarantees that we do not read
	// data before our watermark (which can then be cleaned up in compaction)
	TableDeleteBehavior_NoReadsBeforeWatermark TableDeleteBehavior = 1
)

// Enum value maps for TableDeleteBehavior.
var (
	TableDeleteBehavior_name = map[int32]string{
		0: "None",
		1: "NoReadsBeforeWatermark",
	}
	TableDeleteBehavior_value = map[string]int32{
		"None":                   0,
		"NoReadsBeforeWatermark": 1,
	}
)

func (x TableDeleteBehavior) Enum() *TableDeleteBehavior {
	p := new(TableDeleteBehavior)
	*p = x
	return p
}

func (x TableDeleteBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableDeleteBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_rpc_proto_enumTypes[2].Descriptor()
}

func (TableDeleteBehavior) Type() protoreflect.EnumType {
	return &file_proto_rpc_proto_enumTypes[2]
}

func (x TableDeleteBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableDeleteBehavior.Descriptor instead.
func (TableDeleteBehavior) EnumDescriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{2}
}

type TableWriteBehavior int32

const (
	TableWriteBehavior_DefaultWrites           TableWriteBehavior = 0
	TableWriteBehavior_NoWritesBeforeWatermark TableWriteBehavior = 1
)

// Enum value maps for TableWriteBehavior.
var (
	TableWriteBehavior_name = map[int32]string{
		0: "DefaultWrites",
		1: "NoWritesBeforeWatermark",
	}
	TableWriteBehavior_value = map[string]int32{
		"DefaultWrites":           0,
		"NoWritesBeforeWatermark": 1,
	}
)

func (x TableWriteBehavior) Enum() *TableWriteBehavior {
	p := new(TableWriteBehavior)
	*p = x
	return p
}

func (x TableWriteBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableWriteBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_rpc_proto_enumTypes[3].Descriptor()
}

func (TableWriteBehavior) Type() protoreflect.EnumType {
	return &file_proto_rpc_proto_enumTypes[3]
}

func (x TableWriteBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableWriteBehavior.Descriptor instead.
func (TableWriteBehavior) EnumDescriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{3}
}

type StopMode int32

const (
	// The stop message flows through the dataflow like a checkpoint, causing every node to stop at a consistent point
	StopMode_GRACEFUL StopMode = 0
	// All tasks will stop immediately
	StopMode_IMMEDIATE StopMode = 1
)

// Enum value maps for StopMode.
var (
	StopMode_name = map[int32]string{
		0: "GRACEFUL",
		1: "IMMEDIATE",
	}
	StopMode_value = map[string]int32{
		"GRACEFUL":  0,
		"IMMEDIATE": 1,
	}
)

func (x StopMode) Enum() *StopMode {
	p := new(StopMode)
	*p = x
	return p
}

func (x StopMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_rpc_proto_enumTypes[4].Descriptor()
}

func (StopMode) Type() protoreflect.EnumType {
	return &file_proto_rpc_proto_enumTypes[4]
}

func (x StopMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopMode.Descriptor instead.
func (StopMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{4}
}

type StopWorkerStatus int32

const (
	StopWorkerStatus_PLACEHOLDER StopWorkerStatus = 0
	StopWorkerStatus_STOPPED     StopWorkerStatus = 1
	StopWorkerStatus_STOP_FAILED StopWorkerStatus = 2
	StopWorkerStatus_NOT_FOUND   StopWorkerStatus = 3
)

// Enum value maps for StopWorkerStatus.
var (
	StopWorkerStatus_name = map[int32]string{
		0: "PLACEHOLDER",
		1: "STOPPED",
		2: "STOP_FAILED",
		3: "NOT_FOUND",
	}
	StopWorkerStatus_value = map[string]int32{
		"PLACEHOLDER": 0,
		"STOPPED":     1,
		"STOP_FAILED": 2,
		"NOT_FOUND":   3,
	}
)

func (x StopWorkerStatus) Enum() *StopWorkerStatus {
	p := new(StopWorkerStatus)
	*p = x
	return p
}

func (x StopWorkerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopWorkerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_rpc_proto_enumTypes[5].Descriptor()
}

func (StopWorkerStatus) Type() protoreflect.EnumType {
	return &file_proto_rpc_proto_enumTypes[5]
}

func (x StopWorkerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopWorkerStatus.Descriptor instead.
func (StopWorkerStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{5}
}

type WorkerResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slots uint64 `protobuf:"varint,1,opt,name=slots,proto3" json:"slots,omitempty"`
}

func (x *WorkerResources) Reset() {
	*x = WorkerResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerResources) ProtoMessage() {}

func (x *WorkerResources) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerResources.ProtoReflect.Descriptor instead.
func (*WorkerResources) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerResources) GetSlots() uint64 {
	if x != nil {
		return x.Slots
	}
	return 0
}

type RegisterWorkerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId    uint64           `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	NodeId      uint64           `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	JobId       string           `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	RpcAddress  string           `protobuf:"bytes,4,opt,name=rpc_address,json=rpcAddress,proto3" json:"rpc_address,omitempty"`
	DataAddress string           `protobuf:"bytes,5,opt,name=data_address,json=dataAddress,proto3" json:"data_address,omitempty"`
	Resources   *WorkerResources `protobuf:"bytes,6,opt,name=resources,proto3" json:"resources,omitempty"`
	JobHash     string           `protobuf:"bytes,7,opt,name=job_hash,json=jobHash,proto3" json:"job_hash,omitempty"`
	Slots       uint64           `protobuf:"varint,8,opt,name=slots,proto3" json:"slots,omitempty"`
}

func (x *RegisterWorkerReq) Reset() {
	*x = RegisterWorkerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterWorkerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWorkerReq) ProtoMessage() {}

func (x *RegisterWorkerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWorkerReq.ProtoReflect.Descriptor instead.
func (*RegisterWorkerReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterWorkerReq) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *RegisterWorkerReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *RegisterWorkerReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *RegisterWorkerReq) GetRpcAddress() string {
	if x != nil {
		return x.RpcAddress
	}
	return ""
}

func (x *RegisterWorkerReq) GetDataAddress() string {
	if x != nil {
		return x.DataAddress
	}
	return ""
}

func (x *RegisterWorkerReq) GetResources() *WorkerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *RegisterWorkerReq) GetJobHash() string {
	if x != nil {
		return x.JobHash
	}
	return ""
}

func (x *RegisterWorkerReq) GetSlots() uint64 {
	if x != nil {
		return x.Slots
	}
	return 0
}

type RegisterWorkerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterWorkerResp) Reset() {
	*x = RegisterWorkerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterWorkerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWorkerResp) ProtoMessage() {}

func (x *RegisterWorkerResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWorkerResp.ProtoReflect.Descriptor instead.
func (*RegisterWorkerResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{2}
}

type HeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	WorkerId uint64 `protobuf:"varint,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Time     uint64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *HeartbeatReq) Reset() {
	*x = HeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatReq) ProtoMessage() {}

func (x *HeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatReq.ProtoReflect.Descriptor instead.
func (*HeartbeatReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *HeartbeatReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *HeartbeatReq) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *HeartbeatReq) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type HeartbeatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatResp) Reset() {
	*x = HeartbeatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResp) ProtoMessage() {}

func (x *HeartbeatResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResp.ProtoReflect.Descriptor instead.
func (*HeartbeatResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{4}
}

type TaskCheckpointEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId     uint64                  `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Time         uint64                  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	JobId        string                  `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	OperatorId   string                  `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	SubtaskIndex uint32                  `protobuf:"varint,5,opt,name=subtask_index,json=subtaskIndex,proto3" json:"subtask_index,omitempty"`
	Epoch        uint32                  `protobuf:"varint,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	EventType    TaskCheckpointEventType `protobuf:"varint,7,opt,name=event_type,json=eventType,proto3,enum=arroyo_rpc.TaskCheckpointEventType" json:"event_type,omitempty"`
}

func (x *TaskCheckpointEventReq) Reset() {
	*x = TaskCheckpointEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCheckpointEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCheckpointEventReq) ProtoMessage() {}

func (x *TaskCheckpointEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCheckpointEventReq.ProtoReflect.Descriptor instead.
func (*TaskCheckpointEventReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *TaskCheckpointEventReq) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *TaskCheckpointEventReq) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TaskCheckpointEventReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *TaskCheckpointEventReq) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *TaskCheckpointEventReq) GetSubtaskIndex() uint32 {
	if x != nil {
		return x.SubtaskIndex
	}
	return 0
}

func (x *TaskCheckpointEventReq) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *TaskCheckpointEventReq) GetEventType() TaskCheckpointEventType {
	if x != nil {
		return x.EventType
	}
	return TaskCheckpointEventType_STARTED_ALIGNMENT
}

type TaskCheckpointEventResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskCheckpointEventResp) Reset() {
	*x = TaskCheckpointEventResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCheckpointEventResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCheckpointEventResp) ProtoMessage() {}

func (x *TaskCheckpointEventResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCheckpointEventResp.ProtoReflect.Descriptor instead.
func (*TaskCheckpointEventResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{6}
}

type TaskCheckpointCompletedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId   uint64                     `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Time       uint64                     `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	JobId      string                     `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	OperatorId string                     `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	Epoch      uint32                     `protobuf:"varint,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Metadata   *SubtaskCheckpointMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TaskCheckpointCompletedReq) Reset() {
	*x = TaskCheckpointCompletedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCheckpointCompletedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCheckpointCompletedReq) ProtoMessage() {}

func (x *TaskCheckpointCompletedReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCheckpointCompletedReq.ProtoReflect.Descriptor instead.
func (*TaskCheckpointCompletedReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *TaskCheckpointCompletedReq) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *TaskCheckpointCompletedReq) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TaskCheckpointCompletedReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *TaskCheckpointCompletedReq) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *TaskCheckpointCompletedReq) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *TaskCheckpointCompletedReq) GetMetadata() *SubtaskCheckpointMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type TaskCheckpointCompletedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskCheckpointCompletedResp) Reset() {
	*x = TaskCheckpointCompletedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCheckpointCompletedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCheckpointCompletedResp) ProtoMessage() {}

func (x *TaskCheckpointCompletedResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCheckpointCompletedResp.ProtoReflect.Descriptor instead.
func (*TaskCheckpointCompletedResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{8}
}

type TaskFinishedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId        uint64 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Time            uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	JobId           string `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	OperatorId      string `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorSubtask uint64 `protobuf:"varint,5,opt,name=operator_subtask,json=operatorSubtask,proto3" json:"operator_subtask,omitempty"`
}

func (x *TaskFinishedReq) Reset() {
	*x = TaskFinishedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFinishedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFinishedReq) ProtoMessage() {}

func (x *TaskFinishedReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFinishedReq.ProtoReflect.Descriptor instead.
func (*TaskFinishedReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *TaskFinishedReq) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *TaskFinishedReq) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TaskFinishedReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *TaskFinishedReq) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *TaskFinishedReq) GetOperatorSubtask() uint64 {
	if x != nil {
		return x.OperatorSubtask
	}
	return 0
}

type TaskFinishedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskFinishedResp) Reset() {
	*x = TaskFinishedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFinishedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFinishedResp) ProtoMessage() {}

func (x *TaskFinishedResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFinishedResp.ProtoReflect.Descriptor instead.
func (*TaskFinishedResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{10}
}

type TaskFailedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId        uint64 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Time            uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	JobId           string `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	OperatorId      string `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorSubtask uint64 `protobuf:"varint,5,opt,name=operator_subtask,json=operatorSubtask,proto3" json:"operator_subtask,omitempty"`
	Error           string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TaskFailedReq) Reset() {
	*x = TaskFailedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFailedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFailedReq) ProtoMessage() {}

func (x *TaskFailedReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFailedReq.ProtoReflect.Descriptor instead.
func (*TaskFailedReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *TaskFailedReq) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *TaskFailedReq) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TaskFailedReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *TaskFailedReq) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *TaskFailedReq) GetOperatorSubtask() uint64 {
	if x != nil {
		return x.OperatorSubtask
	}
	return 0
}

func (x *TaskFailedReq) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TaskFailedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskFailedResp) Reset() {
	*x = TaskFailedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFailedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFailedResp) ProtoMessage() {}

func (x *TaskFailedResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFailedResp.ProtoReflect.Descriptor instead.
func (*TaskFailedResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{12}
}

type TaskStartedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId        uint64 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Time            uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	JobId           string `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	OperatorId      string `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorSubtask uint64 `protobuf:"varint,5,opt,name=operator_subtask,json=operatorSubtask,proto3" json:"operator_subtask,omitempty"`
}

func (x *TaskStartedReq) Reset() {
	*x = TaskStartedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStartedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStartedReq) ProtoMessage() {}

func (x *TaskStartedReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStartedReq.ProtoReflect.Descriptor instead.
func (*TaskStartedReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *TaskStartedReq) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *TaskStartedReq) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TaskStartedReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *TaskStartedReq) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *TaskStartedReq) GetOperatorSubtask() uint64 {
	if x != nil {
		return x.OperatorSubtask
	}
	return 0
}

type TaskStartedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskStartedResp) Reset() {
	*x = TaskStartedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStartedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStartedResp) ProtoMessage() {}

func (x *TaskStartedResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStartedResp.ProtoReflect.Descriptor instead.
func (*TaskStartedResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{14}
}

type RegisterNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	TaskSlots uint64 `protobuf:"varint,2,opt,name=task_slots,json=taskSlots,proto3" json:"task_slots,omitempty"`
	Addr      string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *RegisterNodeReq) Reset() {
	*x = RegisterNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNodeReq) ProtoMessage() {}

func (x *RegisterNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNodeReq.ProtoReflect.Descriptor instead.
func (*RegisterNodeReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *RegisterNodeReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *RegisterNodeReq) GetTaskSlots() uint64 {
	if x != nil {
		return x.TaskSlots
	}
	return 0
}

func (x *RegisterNodeReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type RegisterNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterNodeResp) Reset() {
	*x = RegisterNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNodeResp) ProtoMessage() {}

func (x *RegisterNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNodeResp.ProtoReflect.Descriptor instead.
func (*RegisterNodeResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{16}
}

type HeartbeatNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Time   uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *HeartbeatNodeReq) Reset() {
	*x = HeartbeatNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatNodeReq) ProtoMessage() {}

func (x *HeartbeatNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatNodeReq.ProtoReflect.Descriptor instead.
func (*HeartbeatNodeReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *HeartbeatNodeReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *HeartbeatNodeReq) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type HeartbeatNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatNodeResp) Reset() {
	*x = HeartbeatNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatNodeResp) ProtoMessage() {}

func (x *HeartbeatNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatNodeResp.ProtoReflect.Descriptor instead.
func (*HeartbeatNodeResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{18}
}

type SinkDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId        string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	OperatorId   string `protobuf:"bytes,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	SubtaskIndex uint32 `protobuf:"varint,3,opt,name=subtask_index,json=subtaskIndex,proto3" json:"subtask_index,omitempty"`
	Timestamp    uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Key          string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Value        string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Done         bool   `protobuf:"varint,7,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *SinkDataReq) Reset() {
	*x = SinkDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SinkDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkDataReq) ProtoMessage() {}

func (x *SinkDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkDataReq.ProtoReflect.Descriptor instead.
func (*SinkDataReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *SinkDataReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *SinkDataReq) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *SinkDataReq) GetSubtaskIndex() uint32 {
	if x != nil {
		return x.SubtaskIndex
	}
	return 0
}

func (x *SinkDataReq) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SinkDataReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SinkDataReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SinkDataReq) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type SinkDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SinkDataResp) Reset() {
	*x = SinkDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SinkDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkDataResp) ProtoMessage() {}

func (x *SinkDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkDataResp.ProtoReflect.Descriptor instead.
func (*SinkDataResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{20}
}

type WorkerFinishedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId   uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	WorkerId uint64 `protobuf:"varint,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Slots    uint64 `protobuf:"varint,3,opt,name=slots,proto3" json:"slots,omitempty"`
	JobId    string `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *WorkerFinishedReq) Reset() {
	*x = WorkerFinishedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerFinishedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerFinishedReq) ProtoMessage() {}

func (x *WorkerFinishedReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerFinishedReq.ProtoReflect.Descriptor instead.
func (*WorkerFinishedReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *WorkerFinishedReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *WorkerFinishedReq) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerFinishedReq) GetSlots() uint64 {
	if x != nil {
		return x.Slots
	}
	return 0
}

func (x *WorkerFinishedReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type WorkerFinishedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkerFinishedResp) Reset() {
	*x = WorkerFinishedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerFinishedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerFinishedResp) ProtoMessage() {}

func (x *WorkerFinishedResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerFinishedResp.ProtoReflect.Descriptor instead.
func (*WorkerFinishedResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{22}
}

type GrpcOutputSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GrpcOutputSubscription) Reset() {
	*x = GrpcOutputSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcOutputSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcOutputSubscription) ProtoMessage() {}

func (x *GrpcOutputSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcOutputSubscription.ProtoReflect.Descriptor instead.
func (*GrpcOutputSubscription) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *GrpcOutputSubscription) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type OutputData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId string `protobuf:"bytes,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	Timestamp  uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Key        string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value      string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Done       bool   `protobuf:"varint,5,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *OutputData) Reset() {
	*x = OutputData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputData) ProtoMessage() {}

func (x *OutputData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputData.ProtoReflect.Descriptor instead.
func (*OutputData) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *OutputData) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *OutputData) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OutputData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OutputData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *OutputData) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type WorkerErrorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId      string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	OperatorId string `protobuf:"bytes,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	TaskIndex  uint32 `protobuf:"varint,3,opt,name=task_index,json=taskIndex,proto3" json:"task_index,omitempty"`
	Message    string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Details    string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *WorkerErrorReq) Reset() {
	*x = WorkerErrorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerErrorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerErrorReq) ProtoMessage() {}

func (x *WorkerErrorReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerErrorReq.ProtoReflect.Descriptor instead.
func (*WorkerErrorReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *WorkerErrorReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *WorkerErrorReq) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *WorkerErrorReq) GetTaskIndex() uint32 {
	if x != nil {
		return x.TaskIndex
	}
	return 0
}

func (x *WorkerErrorReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WorkerErrorReq) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type WorkerErrorRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkerErrorRes) Reset() {
	*x = WorkerErrorRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerErrorRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerErrorRes) ProtoMessage() {}

func (x *WorkerErrorRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerErrorRes.ProtoReflect.Descriptor instead.
func (*WorkerErrorRes) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{26}
}

type ParquetStoreData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch              uint32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	File               string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Table              string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	MinRoutingKey      uint64 `protobuf:"varint,4,opt,name=min_routing_key,json=minRoutingKey,proto3" json:"min_routing_key,omitempty"`
	MaxRoutingKey      uint64 `protobuf:"varint,5,opt,name=max_routing_key,json=maxRoutingKey,proto3" json:"max_routing_key,omitempty"`
	MaxTimestampMicros uint64 `protobuf:"varint,6,opt,name=max_timestamp_micros,json=maxTimestampMicros,proto3" json:"max_timestamp_micros,omitempty"`
}

func (x *ParquetStoreData) Reset() {
	*x = ParquetStoreData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetStoreData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetStoreData) ProtoMessage() {}

func (x *ParquetStoreData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetStoreData.ProtoReflect.Descriptor instead.
func (*ParquetStoreData) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{27}
}

func (x *ParquetStoreData) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ParquetStoreData) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ParquetStoreData) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ParquetStoreData) GetMinRoutingKey() uint64 {
	if x != nil {
		return x.MinRoutingKey
	}
	return 0
}

func (x *ParquetStoreData) GetMaxRoutingKey() uint64 {
	if x != nil {
		return x.MaxRoutingKey
	}
	return 0
}

func (x *ParquetStoreData) GetMaxTimestampMicros() uint64 {
	if x != nil {
		return x.MaxTimestampMicros
	}
	return 0
}

// Checkpoint metadata
type CheckpointMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId       string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Epoch       uint32   `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	MinEpoch    uint32   `protobuf:"varint,3,opt,name=min_epoch,json=minEpoch,proto3" json:"min_epoch,omitempty"`
	StartTime   uint64   `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime  uint64   `protobuf:"varint,5,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	OperatorIds []string `protobuf:"bytes,6,rep,name=operator_ids,json=operatorIds,proto3" json:"operator_ids,omitempty"`
}

func (x *CheckpointMetadata) Reset() {
	*x = CheckpointMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointMetadata) ProtoMessage() {}

func (x *CheckpointMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointMetadata.ProtoReflect.Descriptor instead.
func (*CheckpointMetadata) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{28}
}

func (x *CheckpointMetadata) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *CheckpointMetadata) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CheckpointMetadata) GetMinEpoch() uint32 {
	if x != nil {
		return x.MinEpoch
	}
	return 0
}

func (x *CheckpointMetadata) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CheckpointMetadata) GetFinishTime() uint64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *CheckpointMetadata) GetOperatorIds() []string {
	if x != nil {
		return x.OperatorIds
	}
	return nil
}

type SubtaskCheckpointMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubtaskIndex uint32             `protobuf:"varint,1,opt,name=subtask_index,json=subtaskIndex,proto3" json:"subtask_index,omitempty"`
	StartTime    uint64             `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime   uint64             `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Watermark    *uint64            `protobuf:"varint,4,opt,name=watermark,proto3,oneof" json:"watermark,omitempty"`
	HasState     bool               `protobuf:"varint,5,opt,name=has_state,json=hasState,proto3" json:"has_state,omitempty"`
	Tables       []*TableDescriptor `protobuf:"bytes,6,rep,name=tables,proto3" json:"tables,omitempty"`
	Bytes        uint64             `protobuf:"varint,7,opt,name=bytes,proto3" json:"bytes,omitempty"`
	BackendData  []*BackendData     `protobuf:"bytes,8,rep,name=backend_data,json=backendData,proto3" json:"backend_data,omitempty"`
}

func (x *SubtaskCheckpointMetadata) Reset() {
	*x = SubtaskCheckpointMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskCheckpointMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskCheckpointMetadata) ProtoMessage() {}

func (x *SubtaskCheckpointMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskCheckpointMetadata.ProtoReflect.Descriptor instead.
func (*SubtaskCheckpointMetadata) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{29}
}

func (x *SubtaskCheckpointMetadata) GetSubtaskIndex() uint32 {
	if x != nil {
		return x.SubtaskIndex
	}
	return 0
}

func (x *SubtaskCheckpointMetadata) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SubtaskCheckpointMetadata) GetFinishTime() uint64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *SubtaskCheckpointMetadata) GetWatermark() uint64 {
	if x != nil && x.Watermark != nil {
		return *x.Watermark
	}
	return 0
}

func (x *SubtaskCheckpointMetadata) GetHasState() bool {
	if x != nil {
		return x.HasState
	}
	return false
}

func (x *SubtaskCheckpointMetadata) GetTables() []*TableDescriptor {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *SubtaskCheckpointMetadata) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *SubtaskCheckpointMetadata) GetBackendData() []*BackendData {
	if x != nil {
		return x.BackendData
	}
	return nil
}

type BackendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BackendData:
	//
	//	*BackendData_ParquetStore
	BackendData isBackendData_BackendData `protobuf_oneof:"backend_data"`
}

func (x *BackendData) Reset() {
	*x = BackendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackendData) ProtoMessage() {}

func (x *BackendData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackendData.ProtoReflect.Descriptor instead.
func (*BackendData) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{30}
}

func (m *BackendData) GetBackendData() isBackendData_BackendData {
	if m != nil {
		return m.BackendData
	}
	return nil
}

func (x *BackendData) GetParquetStore() *ParquetStoreData {
	if x, ok := x.GetBackendData().(*BackendData_ParquetStore); ok {
		return x.ParquetStore
	}
	return nil
}

type isBackendData_BackendData interface {
	isBackendData_BackendData()
}

type BackendData_ParquetStore struct {
	ParquetStore *ParquetStoreData `protobuf:"bytes,3,opt,name=parquet_store,json=parquetStore,proto3,oneof"`
}

func (*BackendData_ParquetStore) isBackendData_BackendData() {}

type OperatorCheckpointMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId        string             `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	OperatorId   string             `protobuf:"bytes,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	Epoch        uint32             `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StartTime    uint64             `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime   uint64             `protobuf:"varint,5,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	MinWatermark *uint64            `protobuf:"varint,6,opt,name=min_watermark,json=minWatermark,proto3,oneof" json:"min_watermark,omitempty"`
	MaxWatermark *uint64            `protobuf:"varint,7,opt,name=max_watermark,json=maxWatermark,proto3,oneof" json:"max_watermark,omitempty"`
	HasState     bool               `protobuf:"varint,8,opt,name=has_state,json=hasState,proto3" json:"has_state,omitempty"`
	Tables       []*TableDescriptor `protobuf:"bytes,9,rep,name=tables,proto3" json:"tables,omitempty"`
	BackendData  []*BackendData     `protobuf:"bytes,10,rep,name=backend_data,json=backendData,proto3" json:"backend_data,omitempty"`
	Bytes        uint64             `protobuf:"varint,11,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *OperatorCheckpointMetadata) Reset() {
	*x = OperatorCheckpointMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorCheckpointMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorCheckpointMetadata) ProtoMessage() {}

func (x *OperatorCheckpointMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorCheckpointMetadata.ProtoReflect.Descriptor instead.
func (*OperatorCheckpointMetadata) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{31}
}

func (x *OperatorCheckpointMetadata) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *OperatorCheckpointMetadata) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *OperatorCheckpointMetadata) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *OperatorCheckpointMetadata) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *OperatorCheckpointMetadata) GetFinishTime() uint64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *OperatorCheckpointMetadata) GetMinWatermark() uint64 {
	if x != nil && x.MinWatermark != nil {
		return *x.MinWatermark
	}
	return 0
}

func (x *OperatorCheckpointMetadata) GetMaxWatermark() uint64 {
	if x != nil && x.MaxWatermark != nil {
		return *x.MaxWatermark
	}
	return 0
}

func (x *OperatorCheckpointMetadata) GetHasState() bool {
	if x != nil {
		return x.HasState
	}
	return false
}

func (x *OperatorCheckpointMetadata) GetTables() []*TableDescriptor {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *OperatorCheckpointMetadata) GetBackendData() []*BackendData {
	if x != nil {
		return x.BackendData
	}
	return nil
}

func (x *OperatorCheckpointMetadata) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type TableDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// must be a single byte
	Name            string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string              `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	TableType       TableType           `protobuf:"varint,3,opt,name=table_type,json=tableType,proto3,enum=arroyo_rpc.TableType" json:"table_type,omitempty"`
	DeleteBehavior  TableDeleteBehavior `protobuf:"varint,4,opt,name=delete_behavior,json=deleteBehavior,proto3,enum=arroyo_rpc.TableDeleteBehavior" json:"delete_behavior,omitempty"`
	RetentionMicros uint64              `protobuf:"varint,5,opt,name=retention_micros,json=retentionMicros,proto3" json:"retention_micros,omitempty"`
	WriteBehavior   TableWriteBehavior  `protobuf:"varint,6,opt,name=write_behavior,json=writeBehavior,proto3,enum=arroyo_rpc.TableWriteBehavior" json:"write_behavior,omitempty"`
}

func (x *TableDescriptor) Reset() {
	*x = TableDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDescriptor) ProtoMessage() {}

func (x *TableDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDescriptor.ProtoReflect.Descriptor instead.
func (*TableDescriptor) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{32}
}

func (x *TableDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TableDescriptor) GetTableType() TableType {
	if x != nil {
		return x.TableType
	}
	return TableType_Global
}

func (x *TableDescriptor) GetDeleteBehavior() TableDeleteBehavior {
	if x != nil {
		return x.DeleteBehavior
	}
	return TableDeleteBehavior_None
}

func (x *TableDescriptor) GetRetentionMicros() uint64 {
	if x != nil {
		return x.RetentionMicros
	}
	return 0
}

func (x *TableDescriptor) GetWriteBehavior() TableWriteBehavior {
	if x != nil {
		return x.WriteBehavior
	}
	return TableWriteBehavior_DefaultWrites
}

type TaskAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId      string `protobuf:"bytes,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorSubtask uint64 `protobuf:"varint,2,opt,name=operator_subtask,json=operatorSubtask,proto3" json:"operator_subtask,omitempty"`
	WorkerId        uint64 `protobuf:"varint,4,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	WorkerAddr      string `protobuf:"bytes,5,opt,name=worker_addr,json=workerAddr,proto3" json:"worker_addr,omitempty"`
}

func (x *TaskAssignment) Reset() {
	*x = TaskAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignment) ProtoMessage() {}

func (x *TaskAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignment.ProtoReflect.Descriptor instead.
func (*TaskAssignment) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{33}
}

func (x *TaskAssignment) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *TaskAssignment) GetOperatorSubtask() uint64 {
	if x != nil {
		return x.OperatorSubtask
	}
	return 0
}

func (x *TaskAssignment) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *TaskAssignment) GetWorkerAddr() string {
	if x != nil {
		return x.WorkerAddr
	}
	return ""
}

type StartExecutionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RestoreEpoch *uint32           `protobuf:"varint,2,opt,name=restore_epoch,json=restoreEpoch,proto3,oneof" json:"restore_epoch,omitempty"`
	Tasks        []*TaskAssignment `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *StartExecutionReq) Reset() {
	*x = StartExecutionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartExecutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartExecutionReq) ProtoMessage() {}

func (x *StartExecutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartExecutionReq.ProtoReflect.Descriptor instead.
func (*StartExecutionReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{34}
}

func (x *StartExecutionReq) GetRestoreEpoch() uint32 {
	if x != nil && x.RestoreEpoch != nil {
		return *x.RestoreEpoch
	}
	return 0
}

func (x *StartExecutionReq) GetTasks() []*TaskAssignment {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type StartExecutionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartExecutionResp) Reset() {
	*x = StartExecutionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartExecutionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartExecutionResp) ProtoMessage() {}

func (x *StartExecutionResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartExecutionResp.ProtoReflect.Descriptor instead.
func (*StartExecutionResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{35}
}

type CheckpointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch     uint32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	MinEpoch  uint32 `protobuf:"varint,2,opt,name=min_epoch,json=minEpoch,proto3" json:"min_epoch,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// if set, tasks will finish after completing the checkpoint
	ThenStop bool `protobuf:"varint,4,opt,name=then_stop,json=thenStop,proto3" json:"then_stop,omitempty"`
}

func (x *CheckpointReq) Reset() {
	*x = CheckpointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointReq) ProtoMessage() {}

func (x *CheckpointReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointReq.ProtoReflect.Descriptor instead.
func (*CheckpointReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{36}
}

func (x *CheckpointReq) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CheckpointReq) GetMinEpoch() uint32 {
	if x != nil {
		return x.MinEpoch
	}
	return 0
}

func (x *CheckpointReq) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CheckpointReq) GetThenStop() bool {
	if x != nil {
		return x.ThenStop
	}
	return false
}

type CheckpointResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckpointResp) Reset() {
	*x = CheckpointResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointResp) ProtoMessage() {}

func (x *CheckpointResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointResp.ProtoReflect.Descriptor instead.
func (*CheckpointResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{37}
}

type StopExecutionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopMode StopMode `protobuf:"varint,1,opt,name=stop_mode,json=stopMode,proto3,enum=arroyo_rpc.StopMode" json:"stop_mode,omitempty"`
}

func (x *StopExecutionReq) Reset() {
	*x = StopExecutionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopExecutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopExecutionReq) ProtoMessage() {}

func (x *StopExecutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopExecutionReq.ProtoReflect.Descriptor instead.
func (*StopExecutionReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{38}
}

func (x *StopExecutionReq) GetStopMode() StopMode {
	if x != nil {
		return x.StopMode
	}
	return StopMode_GRACEFUL
}

type StopExecutionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopExecutionResp) Reset() {
	*x = StopExecutionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopExecutionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopExecutionResp) ProtoMessage() {}

func (x *StopExecutionResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopExecutionResp.ProtoReflect.Descriptor instead.
func (*StopExecutionResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{39}
}

type JobFinishedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobFinishedReq) Reset() {
	*x = JobFinishedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobFinishedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobFinishedReq) ProtoMessage() {}

func (x *JobFinishedReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobFinishedReq.ProtoReflect.Descriptor instead.
func (*JobFinishedReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{40}
}

type JobFinishedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobFinishedResp) Reset() {
	*x = JobFinishedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobFinishedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobFinishedResp) ProtoMessage() {}

func (x *JobFinishedResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobFinishedResp.ProtoReflect.Descriptor instead.
func (*JobFinishedResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{41}
}

type StartWorkerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Binary  []byte            `protobuf:"bytes,2,opt,name=binary,proto3" json:"binary,omitempty"`
	Wasm    []byte            `protobuf:"bytes,3,opt,name=wasm,proto3" json:"wasm,omitempty"`
	JobId   string            `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobHash string            `protobuf:"bytes,5,opt,name=job_hash,json=jobHash,proto3" json:"job_hash,omitempty"`
	Slots   uint64            `protobuf:"varint,6,opt,name=slots,proto3" json:"slots,omitempty"`
	NodeId  uint64            `protobuf:"varint,7,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RunId   uint64            `protobuf:"varint,8,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	EnvVars map[string]string `protobuf:"bytes,9,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartWorkerReq) Reset() {
	*x = StartWorkerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkerReq) ProtoMessage() {}

func (x *StartWorkerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkerReq.ProtoReflect.Descriptor instead.
func (*StartWorkerReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{42}
}

func (x *StartWorkerReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartWorkerReq) GetBinary() []byte {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *StartWorkerReq) GetWasm() []byte {
	if x != nil {
		return x.Wasm
	}
	return nil
}

func (x *StartWorkerReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *StartWorkerReq) GetJobHash() string {
	if x != nil {
		return x.JobHash
	}
	return ""
}

func (x *StartWorkerReq) GetSlots() uint64 {
	if x != nil {
		return x.Slots
	}
	return 0
}

func (x *StartWorkerReq) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *StartWorkerReq) GetRunId() uint64 {
	if x != nil {
		return x.RunId
	}
	return 0
}

func (x *StartWorkerReq) GetEnvVars() map[string]string {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

type StartWorkerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId uint64 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
}

func (x *StartWorkerResp) Reset() {
	*x = StartWorkerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkerResp) ProtoMessage() {}

func (x *StartWorkerResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkerResp.ProtoReflect.Descriptor instead.
func (*StartWorkerResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{43}
}

func (x *StartWorkerResp) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

type GetWorkersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetWorkersReq) Reset() {
	*x = GetWorkersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkersReq) ProtoMessage() {}

func (x *GetWorkersReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkersReq.ProtoReflect.Descriptor instead.
func (*GetWorkersReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{44}
}

type WorkerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hash    string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Slots   uint64 `protobuf:"varint,3,opt,name=slots,proto3" json:"slots,omitempty"`
	Running bool   `protobuf:"varint,4,opt,name=running,proto3" json:"running,omitempty"`
}

func (x *WorkerStatus) Reset() {
	*x = WorkerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatus) ProtoMessage() {}

func (x *WorkerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatus.ProtoReflect.Descriptor instead.
func (*WorkerStatus) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{45}
}

func (x *WorkerStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkerStatus) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *WorkerStatus) GetSlots() uint64 {
	if x != nil {
		return x.Slots
	}
	return 0
}

func (x *WorkerStatus) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

type GetWorkersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses []*WorkerStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *GetWorkersResp) Reset() {
	*x = GetWorkersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkersResp) ProtoMessage() {}

func (x *GetWorkersResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkersResp.ProtoReflect.Descriptor instead.
func (*GetWorkersResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{46}
}

func (x *GetWorkersResp) GetStatuses() []*WorkerStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type StopWorkerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    string `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	WorkerId uint64 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Force    bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *StopWorkerReq) Reset() {
	*x = StopWorkerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopWorkerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWorkerReq) ProtoMessage() {}

func (x *StopWorkerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopWorkerReq.ProtoReflect.Descriptor instead.
func (*StopWorkerReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{47}
}

func (x *StopWorkerReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *StopWorkerReq) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *StopWorkerReq) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type StopWorkerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StopWorkerStatus `protobuf:"varint,1,opt,name=status,proto3,enum=arroyo_rpc.StopWorkerStatus" json:"status,omitempty"`
}

func (x *StopWorkerResp) Reset() {
	*x = StopWorkerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopWorkerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWorkerResp) ProtoMessage() {}

func (x *StopWorkerResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopWorkerResp.ProtoReflect.Descriptor instead.
func (*StopWorkerResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{48}
}

func (x *StopWorkerResp) GetStatus() StopWorkerStatus {
	if x != nil {
		return x.Status
	}
	return StopWorkerStatus_PLACEHOLDER
}

type CompileQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Types    string `protobuf:"bytes,2,opt,name=types,proto3" json:"types,omitempty"`
	Pipeline string `protobuf:"bytes,3,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	WasmFns  string `protobuf:"bytes,4,opt,name=wasm_fns,json=wasmFns,proto3" json:"wasm_fns,omitempty"`
}

func (x *CompileQueryReq) Reset() {
	*x = CompileQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileQueryReq) ProtoMessage() {}

func (x *CompileQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileQueryReq.ProtoReflect.Descriptor instead.
func (*CompileQueryReq) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{49}
}

func (x *CompileQueryReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *CompileQueryReq) GetTypes() string {
	if x != nil {
		return x.Types
	}
	return ""
}

func (x *CompileQueryReq) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *CompileQueryReq) GetWasmFns() string {
	if x != nil {
		return x.WasmFns
	}
	return ""
}

type CompileQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelinePath string `protobuf:"bytes,1,opt,name=pipeline_path,json=pipelinePath,proto3" json:"pipeline_path,omitempty"`
	WasmFnsPath  string `protobuf:"bytes,2,opt,name=wasm_fns_path,json=wasmFnsPath,proto3" json:"wasm_fns_path,omitempty"`
}

func (x *CompileQueryResp) Reset() {
	*x = CompileQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileQueryResp) ProtoMessage() {}

func (x *CompileQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileQueryResp.ProtoReflect.Descriptor instead.
func (*CompileQueryResp) Descriptor() ([]byte, []int) {
	return file_proto_rpc_proto_rawDescGZIP(), []int{50}
}

func (x *CompileQueryResp) GetPipelinePath() string {
	if x != nil {
		return x.PipelinePath
	}
	return ""
}

func (x *CompileQueryResp) GetWasmFnsPath() string {
	if x != nil {
		return x.WasmFnsPath
	}
	return ""
}

var File_proto_rpc_proto protoreflect.FileDescriptor

var file_proto_rpc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x22, 0x27, 0x0a,
	0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x56, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x80, 0x02, 0x0a, 0x16, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xde, 0x01, 0x0a, 0x1a, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1d, 0x0a, 0x1b, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa5, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x12,
	0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x10,
	0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x11, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5d, 0x0a, 0x0f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3f, 0x0a,
	0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x13,
	0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xc4, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x69,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0x76, 0x0a, 0x11, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2f, 0x0a, 0x16, 0x47, 0x72, 0x70, 0x63,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x0a, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x10, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x12, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x22, 0xd5,
	0x02, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0c,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x62, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x71, 0x75, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc6, 0x03, 0x0a, 0x1a, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79,
	0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0xb9, 0x02, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x0e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22,
	0x9a, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x22, 0x81, 0x01, 0x0a,
	0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7d, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x6e,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x68, 0x65,
	0x6e, 0x53, 0x74, 0x6f, 0x70, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x45, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x13,
	0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x10, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x22, 0x11, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc8, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x73, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x77, 0x61, 0x73, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x56, 0x61,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x22, 0x66, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x46, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22,
	0x46, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x75, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x66, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x73, 0x6d, 0x46, 0x6e, 0x73, 0x22, 0x5b,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x61, 0x73, 0x6d, 0x5f,
	0x66, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x61, 0x73, 0x6d, 0x46, 0x6e, 0x73, 0x50, 0x61, 0x74, 0x68, 0x2a, 0x7b, 0x0a, 0x17, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x45,
	0x54, 0x55, 0x50, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x03, 0x2a, 0x3c, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4d, 0x61, 0x70, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x13, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x6f, 0x52, 0x65, 0x61,
	0x64, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x12, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x4e, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x10, 0x01, 0x2a, 0x27, 0x0a, 0x08, 0x53, 0x74, 0x6f,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x41, 0x43, 0x45, 0x46, 0x55,
	0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x2a, 0x50, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48,
	0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x03, 0x32, 0x8e, 0x08, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x12, 0x49, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x4f, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x12, 0x1d, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x40, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x18,
	0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79,
	0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x1a, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x13, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a, 0x17, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x43, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x19, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x0e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x22, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72,
	0x70, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x45,
	0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x2e,
	0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x72, 0x72, 0x6f,
	0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x32, 0xb8, 0x02, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x70, 0x63, 0x12, 0x4f, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a,
	0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0d, 0x53, 0x74,
	0x6f, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x72, 0x72, 0x6f,
	0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x32, 0xdc, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x70, 0x63, 0x12, 0x46, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79,
	0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a,
	0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0a, 0x53, 0x74,
	0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79,
	0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x59, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x12,
	0x49, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x79, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x79, 0x6f, 0x2f, 0x61, 0x72,
	0x72, 0x6f, 0x79, 0x6f, 0x2d, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_rpc_proto_rawDescOnce sync.Once
	file_proto_rpc_proto_rawDescData = file_proto_rpc_proto_rawDesc
)

func file_proto_rpc_proto_rawDescGZIP() []byte {
	file_proto_rpc_proto_rawDescOnce.Do(func() {
		file_proto_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_rpc_proto_rawDescData)
	})
	return file_proto_rpc_proto_rawDescData
}

var file_proto_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_proto_rpc_proto_goTypes = []interface{}{
	(TaskCheckpointEventType)(0),        // 0: arroyo_rpc.TaskCheckpointEventType
	(TableType)(0),                      // 1: arroyo_rpc.TableType
	(TableDeleteBehavior)(0),            // 2: arroyo_rpc.TableDeleteBehavior
	(TableWriteBehavior)(0),             // 3: arroyo_rpc.TableWriteBehavior
	(StopMode)(0),                       // 4: arroyo_rpc.StopMode
	(StopWorkerStatus)(0),               // 5: arroyo_rpc.StopWorkerStatus
	(*WorkerResources)(nil),             // 6: arroyo_rpc.WorkerResources
	(*RegisterWorkerReq)(nil),           // 7: arroyo_rpc.RegisterWorkerReq
	(*RegisterWorkerResp)(nil),          // 8: arroyo_rpc.RegisterWorkerResp
	(*HeartbeatReq)(nil),                // 9: arroyo_rpc.HeartbeatReq
	(*HeartbeatResp)(nil),               // 10: arroyo_rpc.HeartbeatResp
	(*TaskCheckpointEventReq)(nil),      // 11: arroyo_rpc.TaskCheckpointEventReq
	(*TaskCheckpointEventResp)(nil),     // 12: arroyo_rpc.TaskCheckpointEventResp
	(*TaskCheckpointCompletedReq)(nil),  // 13: arroyo_rpc.TaskCheckpointCompletedReq
	(*TaskCheckpointCompletedResp)(nil), // 14: arroyo_rpc.TaskCheckpointCompletedResp
	(*TaskFinishedReq)(nil),             // 15: arroyo_rpc.TaskFinishedReq
	(*TaskFinishedResp)(nil),            // 16: arroyo_rpc.TaskFinishedResp
	(*TaskFailedReq)(nil),               // 17: arroyo_rpc.TaskFailedReq
	(*TaskFailedResp)(nil),              // 18: arroyo_rpc.TaskFailedResp
	(*TaskStartedReq)(nil),              // 19: arroyo_rpc.TaskStartedReq
	(*TaskStartedResp)(nil),             // 20: arroyo_rpc.TaskStartedResp
	(*RegisterNodeReq)(nil),             // 21: arroyo_rpc.RegisterNodeReq
	(*RegisterNodeResp)(nil),            // 22: arroyo_rpc.RegisterNodeResp
	(*HeartbeatNodeReq)(nil),            // 23: arroyo_rpc.HeartbeatNodeReq
	(*HeartbeatNodeResp)(nil),           // 24: arroyo_rpc.HeartbeatNodeResp
	(*SinkDataReq)(nil),                 // 25: arroyo_rpc.SinkDataReq
	(*SinkDataResp)(nil),                // 26: arroyo_rpc.SinkDataResp
	(*WorkerFinishedReq)(nil),           // 27: arroyo_rpc.WorkerFinishedReq
	(*WorkerFinishedResp)(nil),          // 28: arroyo_rpc.WorkerFinishedResp
	(*GrpcOutputSubscription)(nil),      // 29: arroyo_rpc.GrpcOutputSubscription
	(*OutputData)(nil),                  // 30: arroyo_rpc.OutputData
	(*WorkerErrorReq)(nil),              // 31: arroyo_rpc.WorkerErrorReq
	(*WorkerErrorRes)(nil),              // 32: arroyo_rpc.WorkerErrorRes
	(*ParquetStoreData)(nil),            // 33: arroyo_rpc.ParquetStoreData
	(*CheckpointMetadata)(nil),          // 34: arroyo_rpc.CheckpointMetadata
	(*SubtaskCheckpointMetadata)(nil),   // 35: arroyo_rpc.SubtaskCheckpointMetadata
	(*BackendData)(nil),                 // 36: arroyo_rpc.BackendData
	(*OperatorCheckpointMetadata)(nil),  // 37: arroyo_rpc.OperatorCheckpointMetadata
	(*TableDescriptor)(nil),             // 38: arroyo_rpc.TableDescriptor
	(*TaskAssignment)(nil),              // 39: arroyo_rpc.TaskAssignment
	(*StartExecutionReq)(nil),           // 40: arroyo_rpc.StartExecutionReq
	(*StartExecutionResp)(nil),          // 41: arroyo_rpc.StartExecutionResp
	(*CheckpointReq)(nil),               // 42: arroyo_rpc.CheckpointReq
	(*CheckpointResp)(nil),              // 43: arroyo_rpc.CheckpointResp
	(*StopExecutionReq)(nil),            // 44: arroyo_rpc.StopExecutionReq
	(*StopExecutionResp)(nil),           // 45: arroyo_rpc.StopExecutionResp
	(*JobFinishedReq)(nil),              // 46: arroyo_rpc.JobFinishedReq
	(*JobFinishedResp)(nil),             // 47: arroyo_rpc.JobFinishedResp
	(*StartWorkerReq)(nil),              // 48: arroyo_rpc.StartWorkerReq
	(*StartWorkerResp)(nil),             // 49: arroyo_rpc.StartWorkerResp
	(*GetWorkersReq)(nil),               // 50: arroyo_rpc.GetWorkersReq
	(*WorkerStatus)(nil),                // 51: arroyo_rpc.WorkerStatus
	(*GetWorkersResp)(nil),              // 52: arroyo_rpc.GetWorkersResp
	(*StopWorkerReq)(nil),               // 53: arroyo_rpc.StopWorkerReq
	(*StopWorkerResp)(nil),              // 54: arroyo_rpc.StopWorkerResp
	(*CompileQueryReq)(nil),             // 55: arroyo_rpc.CompileQueryReq
	(*CompileQueryResp)(nil),            // 56: arroyo_rpc.CompileQueryResp
	nil,                                 // 57: arroyo_rpc.StartWorkerReq.EnvVarsEntry
}
var file_proto_rpc_proto_depIdxs = []int32{
	6,  // 0: arroyo_rpc.RegisterWorkerReq.resources:type_name -> arroyo_rpc.WorkerResources
	0,  // 1: arroyo_rpc.TaskCheckpointEventReq.event_type:type_name -> arroyo_rpc.TaskCheckpointEventType
	35, // 2: arroyo_rpc.TaskCheckpointCompletedReq.metadata:type_name -> arroyo_rpc.SubtaskCheckpointMetadata
	38, // 3: arroyo_rpc.SubtaskCheckpointMetadata.tables:type_name -> arroyo_rpc.TableDescriptor
	36, // 4: arroyo_rpc.SubtaskCheckpointMetadata.backend_data:type_name -> arroyo_rpc.BackendData
	33, // 5: arroyo_rpc.BackendData.parquet_store:type_name -> arroyo_rpc.ParquetStoreData
	38, // 6: arroyo_rpc.OperatorCheckpointMetadata.tables:type_name -> arroyo_rpc.TableDescriptor
	36, // 7: arroyo_rpc.OperatorCheckpointMetadata.backend_data:type_name -> arroyo_rpc.BackendData
	1,  // 8: arroyo_rpc.TableDescriptor.table_type:type_name -> arroyo_rpc.TableType
	2,  // 9: arroyo_rpc.TableDescriptor.delete_behavior:type_name -> arroyo_rpc.TableDeleteBehavior
	3,  // 10: arroyo_rpc.TableDescriptor.write_behavior:type_name -> arroyo_rpc.TableWriteBehavior
	39, // 11: arroyo_rpc.StartExecutionReq.tasks:type_name -> arroyo_rpc.TaskAssignment
	4,  // 12: arroyo_rpc.StopExecutionReq.stop_mode:type_name -> arroyo_rpc.StopMode
	57, // 13: arroyo_rpc.StartWorkerReq.env_vars:type_name -> arroyo_rpc.StartWorkerReq.EnvVarsEntry
	51, // 14: arroyo_rpc.GetWorkersResp.statuses:type_name -> arroyo_rpc.WorkerStatus
	5,  // 15: arroyo_rpc.StopWorkerResp.status:type_name -> arroyo_rpc.StopWorkerStatus
	21, // 16: arroyo_rpc.ControllerGrpc.RegisterNode:input_type -> arroyo_rpc.RegisterNodeReq
	23, // 17: arroyo_rpc.ControllerGrpc.HeartbeatNode:input_type -> arroyo_rpc.HeartbeatNodeReq
	7,  // 18: arroyo_rpc.ControllerGrpc.RegisterWorker:input_type -> arroyo_rpc.RegisterWorkerReq
	9,  // 19: arroyo_rpc.ControllerGrpc.Heartbeat:input_type -> arroyo_rpc.HeartbeatReq
	19, // 20: arroyo_rpc.ControllerGrpc.TaskStarted:input_type -> arroyo_rpc.TaskStartedReq
	11, // 21: arroyo_rpc.ControllerGrpc.TaskCheckpointEvent:input_type -> arroyo_rpc.TaskCheckpointEventReq
	13, // 22: arroyo_rpc.ControllerGrpc.TaskCheckpointCompleted:input_type -> arroyo_rpc.TaskCheckpointCompletedReq
	15, // 23: arroyo_rpc.ControllerGrpc.TaskFinished:input_type -> arroyo_rpc.TaskFinishedReq
	17, // 24: arroyo_rpc.ControllerGrpc.TaskFailed:input_type -> arroyo_rpc.TaskFailedReq
	25, // 25: arroyo_rpc.ControllerGrpc.SendSinkData:input_type -> arroyo_rpc.SinkDataReq
	27, // 26: arroyo_rpc.ControllerGrpc.WorkerFinished:input_type -> arroyo_rpc.WorkerFinishedReq
	29, // 27: arroyo_rpc.ControllerGrpc.SubscribeToOutput:input_type -> arroyo_rpc.GrpcOutputSubscription
	31, // 28: arroyo_rpc.ControllerGrpc.WorkerError:input_type -> arroyo_rpc.WorkerErrorReq
	40, // 29: arroyo_rpc.WorkerGrpc.StartExecution:input_type -> arroyo_rpc.StartExecutionReq
	42, // 30: arroyo_rpc.WorkerGrpc.Checkpoint:input_type -> arroyo_rpc.CheckpointReq
	44, // 31: arroyo_rpc.WorkerGrpc.StopExecution:input_type -> arroyo_rpc.StopExecutionReq
	46, // 32: arroyo_rpc.WorkerGrpc.JobFinished:input_type -> arroyo_rpc.JobFinishedReq
	48, // 33: arroyo_rpc.NodeGrpc.StartWorker:input_type -> arroyo_rpc.StartWorkerReq
	50, // 34: arroyo_rpc.NodeGrpc.GetWorkers:input_type -> arroyo_rpc.GetWorkersReq
	53, // 35: arroyo_rpc.NodeGrpc.StopWorker:input_type -> arroyo_rpc.StopWorkerReq
	55, // 36: arroyo_rpc.CompilerGrpc.CompileQuery:input_type -> arroyo_rpc.CompileQueryReq
	22, // 37: arroyo_rpc.ControllerGrpc.RegisterNode:output_type -> arroyo_rpc.RegisterNodeResp
	24, // 38: arroyo_rpc.ControllerGrpc.HeartbeatNode:output_type -> arroyo_rpc.HeartbeatNodeResp
	8,  // 39: arroyo_rpc.ControllerGrpc.RegisterWorker:output_type -> arroyo_rpc.RegisterWorkerResp
	10, // 40: arroyo_rpc.ControllerGrpc.Heartbeat:output_type -> arroyo_rpc.HeartbeatResp
	20, // 41: arroyo_rpc.ControllerGrpc.TaskStarted:output_type -> arroyo_rpc.TaskStartedResp
	12, // 42: arroyo_rpc.ControllerGrpc.TaskCheckpointEvent:output_type -> arroyo_rpc.TaskCheckpointEventResp
	14, // 43: arroyo_rpc.ControllerGrpc.TaskCheckpointCompleted:output_type -> arroyo_rpc.TaskCheckpointCompletedResp
	16, // 44: arroyo_rpc.ControllerGrpc.TaskFinished:output_type -> arroyo_rpc.TaskFinishedResp
	18, // 45: arroyo_rpc.ControllerGrpc.TaskFailed:output_type -> arroyo_rpc.TaskFailedResp
	26, // 46: arroyo_rpc.ControllerGrpc.SendSinkData:output_type -> arroyo_rpc.SinkDataResp
	28, // 47: arroyo_rpc.ControllerGrpc.WorkerFinished:output_type -> arroyo_rpc.WorkerFinishedResp
	30, // 48: arroyo_rpc.ControllerGrpc.SubscribeToOutput:output_type -> arroyo_rpc.OutputData
	32, // 49: arroyo_rpc.ControllerGrpc.WorkerError:output_type -> arroyo_rpc.WorkerErrorRes
	41, // 50: arroyo_rpc.WorkerGrpc.StartExecution:output_type -> arroyo_rpc.StartExecutionResp
	43, // 51: arroyo_rpc.WorkerGrpc.Checkpoint:output_type -> arroyo_rpc.CheckpointResp
	45, // 52: arroyo_rpc.WorkerGrpc.StopExecution:output_type -> arroyo_rpc.StopExecutionResp
	47, // 53: arroyo_rpc.WorkerGrpc.JobFinished:output_type -> arroyo_rpc.JobFinishedResp
	49, // 54: arroyo_rpc.NodeGrpc.StartWorker:output_type -> arroyo_rpc.StartWorkerResp
	52, // 55: arroyo_rpc.NodeGrpc.GetWorkers:output_type -> arroyo_rpc.GetWorkersResp
	54, // 56: arroyo_rpc.NodeGrpc.StopWorker:output_type -> arroyo_rpc.StopWorkerResp
	56, // 57: arroyo_rpc.CompilerGrpc.CompileQuery:output_type -> arroyo_rpc.CompileQueryResp
	37, // [37:58] is the sub-list for method output_type
	16, // [16:37] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_proto_rpc_proto_init() }
func file_proto_rpc_proto_init() {
	if File_proto_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterWorkerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterWorkerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCheckpointEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCheckpointEventResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCheckpointCompletedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCheckpointCompletedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFinishedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFinishedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFailedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFailedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStartedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStartedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SinkDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SinkDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerFinishedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerFinishedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcOutputSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerErrorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerErrorRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetStoreData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtaskCheckpointMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorCheckpointMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartExecutionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartExecutionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopExecutionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopExecutionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobFinishedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobFinishedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWorkerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWorkerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopWorkerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopWorkerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_rpc_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_proto_rpc_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*BackendData_ParquetStore)(nil),
	}
	file_proto_rpc_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_proto_rpc_proto_msgTypes[34].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_rpc_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_proto_rpc_proto_goTypes,
		DependencyIndexes: file_proto_rpc_proto_depIdxs,
		EnumInfos:         file_proto_rpc_proto_enumTypes,
		MessageInfos:      file_proto_rpc_proto_msgTypes,
	}.Build()
	File_proto_rpc_proto = out.File
	file_proto_rpc_proto_rawDesc = nil
	file_proto_rpc_proto_goTypes = nil
	file_proto_rpc_proto_depIdxs = nil
}
