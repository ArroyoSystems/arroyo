// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/api.proto

package arroyo_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiGrpc_CreateConnection_FullMethodName    = "/arroyo_api.ApiGrpc/CreateConnection"
	ApiGrpc_TestConnection_FullMethodName      = "/arroyo_api.ApiGrpc/TestConnection"
	ApiGrpc_GetConnections_FullMethodName      = "/arroyo_api.ApiGrpc/GetConnections"
	ApiGrpc_DeleteConnection_FullMethodName    = "/arroyo_api.ApiGrpc/DeleteConnection"
	ApiGrpc_CreateSource_FullMethodName        = "/arroyo_api.ApiGrpc/CreateSource"
	ApiGrpc_GetSources_FullMethodName          = "/arroyo_api.ApiGrpc/GetSources"
	ApiGrpc_DeleteSource_FullMethodName        = "/arroyo_api.ApiGrpc/DeleteSource"
	ApiGrpc_CreateSink_FullMethodName          = "/arroyo_api.ApiGrpc/CreateSink"
	ApiGrpc_GetSinks_FullMethodName            = "/arroyo_api.ApiGrpc/GetSinks"
	ApiGrpc_DeleteSink_FullMethodName          = "/arroyo_api.ApiGrpc/DeleteSink"
	ApiGrpc_GetConfluentSchema_FullMethodName  = "/arroyo_api.ApiGrpc/GetConfluentSchema"
	ApiGrpc_GetSourceMetadata_FullMethodName   = "/arroyo_api.ApiGrpc/GetSourceMetadata"
	ApiGrpc_TestSchema_FullMethodName          = "/arroyo_api.ApiGrpc/TestSchema"
	ApiGrpc_TestSource_FullMethodName          = "/arroyo_api.ApiGrpc/TestSource"
	ApiGrpc_CreatePipeline_FullMethodName      = "/arroyo_api.ApiGrpc/CreatePipeline"
	ApiGrpc_GraphForPipeline_FullMethodName    = "/arroyo_api.ApiGrpc/GraphForPipeline"
	ApiGrpc_GetPipeline_FullMethodName         = "/arroyo_api.ApiGrpc/GetPipeline"
	ApiGrpc_CreateJob_FullMethodName           = "/arroyo_api.ApiGrpc/CreateJob"
	ApiGrpc_DeleteJob_FullMethodName           = "/arroyo_api.ApiGrpc/DeleteJob"
	ApiGrpc_StartPipeline_FullMethodName       = "/arroyo_api.ApiGrpc/StartPipeline"
	ApiGrpc_PreviewPipeline_FullMethodName     = "/arroyo_api.ApiGrpc/PreviewPipeline"
	ApiGrpc_GetJobs_FullMethodName             = "/arroyo_api.ApiGrpc/GetJobs"
	ApiGrpc_GetJobDetails_FullMethodName       = "/arroyo_api.ApiGrpc/GetJobDetails"
	ApiGrpc_GetCheckpoints_FullMethodName      = "/arroyo_api.ApiGrpc/GetCheckpoints"
	ApiGrpc_GetCheckpointDetail_FullMethodName = "/arroyo_api.ApiGrpc/GetCheckpointDetail"
	ApiGrpc_GetOperatorErrors_FullMethodName   = "/arroyo_api.ApiGrpc/GetOperatorErrors"
	ApiGrpc_GetJobMetrics_FullMethodName       = "/arroyo_api.ApiGrpc/GetJobMetrics"
	ApiGrpc_UpdateJob_FullMethodName           = "/arroyo_api.ApiGrpc/UpdateJob"
	ApiGrpc_SubscribeToOutput_FullMethodName   = "/arroyo_api.ApiGrpc/SubscribeToOutput"
)

// ApiGrpcClient is the client API for ApiGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiGrpcClient interface {
	CreateConnection(ctx context.Context, in *CreateConnectionReq, opts ...grpc.CallOption) (*CreateConnectionResp, error)
	TestConnection(ctx context.Context, in *CreateConnectionReq, opts ...grpc.CallOption) (*TestSourceMessage, error)
	GetConnections(ctx context.Context, in *GetConnectionsReq, opts ...grpc.CallOption) (*GetConnectionsResp, error)
	DeleteConnection(ctx context.Context, in *DeleteConnectionReq, opts ...grpc.CallOption) (*DeleteConnectionResp, error)
	CreateSource(ctx context.Context, in *CreateSourceReq, opts ...grpc.CallOption) (*CreateSourceResp, error)
	GetSources(ctx context.Context, in *GetSourcesReq, opts ...grpc.CallOption) (*GetSourcesResp, error)
	DeleteSource(ctx context.Context, in *DeleteSourceReq, opts ...grpc.CallOption) (*DeleteSourceResp, error)
	CreateSink(ctx context.Context, in *CreateSinkReq, opts ...grpc.CallOption) (*CreateSinkResp, error)
	GetSinks(ctx context.Context, in *GetSinksReq, opts ...grpc.CallOption) (*GetSinksResp, error)
	DeleteSink(ctx context.Context, in *DeleteSinkReq, opts ...grpc.CallOption) (*DeleteSinkResp, error)
	GetConfluentSchema(ctx context.Context, in *ConfluentSchemaReq, opts ...grpc.CallOption) (*ConfluentSchemaResp, error)
	GetSourceMetadata(ctx context.Context, in *CreateSourceReq, opts ...grpc.CallOption) (*SourceMetadataResp, error)
	TestSchema(ctx context.Context, in *CreateSourceReq, opts ...grpc.CallOption) (*TestSchemaResp, error)
	TestSource(ctx context.Context, in *CreateSourceReq, opts ...grpc.CallOption) (ApiGrpc_TestSourceClient, error)
	CreatePipeline(ctx context.Context, in *CreatePipelineReq, opts ...grpc.CallOption) (*CreatePipelineResp, error)
	GraphForPipeline(ctx context.Context, in *PipelineGraphReq, opts ...grpc.CallOption) (*PipelineGraphResp, error)
	GetPipeline(ctx context.Context, in *GetPipelineReq, opts ...grpc.CallOption) (*PipelineDef, error)
	CreateJob(ctx context.Context, in *CreateJobReq, opts ...grpc.CallOption) (*CreateJobResp, error)
	DeleteJob(ctx context.Context, in *DeleteJobReq, opts ...grpc.CallOption) (*DeleteJobResp, error)
	StartPipeline(ctx context.Context, in *CreatePipelineReq, opts ...grpc.CallOption) (*CreateJobResp, error)
	PreviewPipeline(ctx context.Context, in *CreatePipelineReq, opts ...grpc.CallOption) (*CreateJobResp, error)
	GetJobs(ctx context.Context, in *GetJobsReq, opts ...grpc.CallOption) (*GetJobsResp, error)
	GetJobDetails(ctx context.Context, in *JobDetailsReq, opts ...grpc.CallOption) (*JobDetailsResp, error)
	GetCheckpoints(ctx context.Context, in *JobCheckpointsReq, opts ...grpc.CallOption) (*JobCheckpointsResp, error)
	GetCheckpointDetail(ctx context.Context, in *CheckpointDetailsReq, opts ...grpc.CallOption) (*CheckpointDetailsResp, error)
	GetOperatorErrors(ctx context.Context, in *OperatorErrorsReq, opts ...grpc.CallOption) (*OperatorErrorsRes, error)
	GetJobMetrics(ctx context.Context, in *JobMetricsReq, opts ...grpc.CallOption) (*JobMetricsResp, error)
	UpdateJob(ctx context.Context, in *UpdateJobReq, opts ...grpc.CallOption) (*UpdateJobResp, error)
	SubscribeToOutput(ctx context.Context, in *GrpcOutputSubscription, opts ...grpc.CallOption) (ApiGrpc_SubscribeToOutputClient, error)
}

type apiGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewApiGrpcClient(cc grpc.ClientConnInterface) ApiGrpcClient {
	return &apiGrpcClient{cc}
}

func (c *apiGrpcClient) CreateConnection(ctx context.Context, in *CreateConnectionReq, opts ...grpc.CallOption) (*CreateConnectionResp, error) {
	out := new(CreateConnectionResp)
	err := c.cc.Invoke(ctx, ApiGrpc_CreateConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) TestConnection(ctx context.Context, in *CreateConnectionReq, opts ...grpc.CallOption) (*TestSourceMessage, error) {
	out := new(TestSourceMessage)
	err := c.cc.Invoke(ctx, ApiGrpc_TestConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetConnections(ctx context.Context, in *GetConnectionsReq, opts ...grpc.CallOption) (*GetConnectionsResp, error) {
	out := new(GetConnectionsResp)
	err := c.cc.Invoke(ctx, ApiGrpc_GetConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) DeleteConnection(ctx context.Context, in *DeleteConnectionReq, opts ...grpc.CallOption) (*DeleteConnectionResp, error) {
	out := new(DeleteConnectionResp)
	err := c.cc.Invoke(ctx, ApiGrpc_DeleteConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) CreateSource(ctx context.Context, in *CreateSourceReq, opts ...grpc.CallOption) (*CreateSourceResp, error) {
	out := new(CreateSourceResp)
	err := c.cc.Invoke(ctx, ApiGrpc_CreateSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetSources(ctx context.Context, in *GetSourcesReq, opts ...grpc.CallOption) (*GetSourcesResp, error) {
	out := new(GetSourcesResp)
	err := c.cc.Invoke(ctx, ApiGrpc_GetSources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) DeleteSource(ctx context.Context, in *DeleteSourceReq, opts ...grpc.CallOption) (*DeleteSourceResp, error) {
	out := new(DeleteSourceResp)
	err := c.cc.Invoke(ctx, ApiGrpc_DeleteSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) CreateSink(ctx context.Context, in *CreateSinkReq, opts ...grpc.CallOption) (*CreateSinkResp, error) {
	out := new(CreateSinkResp)
	err := c.cc.Invoke(ctx, ApiGrpc_CreateSink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetSinks(ctx context.Context, in *GetSinksReq, opts ...grpc.CallOption) (*GetSinksResp, error) {
	out := new(GetSinksResp)
	err := c.cc.Invoke(ctx, ApiGrpc_GetSinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) DeleteSink(ctx context.Context, in *DeleteSinkReq, opts ...grpc.CallOption) (*DeleteSinkResp, error) {
	out := new(DeleteSinkResp)
	err := c.cc.Invoke(ctx, ApiGrpc_DeleteSink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetConfluentSchema(ctx context.Context, in *ConfluentSchemaReq, opts ...grpc.CallOption) (*ConfluentSchemaResp, error) {
	out := new(ConfluentSchemaResp)
	err := c.cc.Invoke(ctx, ApiGrpc_GetConfluentSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetSourceMetadata(ctx context.Context, in *CreateSourceReq, opts ...grpc.CallOption) (*SourceMetadataResp, error) {
	out := new(SourceMetadataResp)
	err := c.cc.Invoke(ctx, ApiGrpc_GetSourceMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) TestSchema(ctx context.Context, in *CreateSourceReq, opts ...grpc.CallOption) (*TestSchemaResp, error) {
	out := new(TestSchemaResp)
	err := c.cc.Invoke(ctx, ApiGrpc_TestSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) TestSource(ctx context.Context, in *CreateSourceReq, opts ...grpc.CallOption) (ApiGrpc_TestSourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiGrpc_ServiceDesc.Streams[0], ApiGrpc_TestSource_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGrpcTestSourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiGrpc_TestSourceClient interface {
	Recv() (*TestSourceMessage, error)
	grpc.ClientStream
}

type apiGrpcTestSourceClient struct {
	grpc.ClientStream
}

func (x *apiGrpcTestSourceClient) Recv() (*TestSourceMessage, error) {
	m := new(TestSourceMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiGrpcClient) CreatePipeline(ctx context.Context, in *CreatePipelineReq, opts ...grpc.CallOption) (*CreatePipelineResp, error) {
	out := new(CreatePipelineResp)
	err := c.cc.Invoke(ctx, ApiGrpc_CreatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GraphForPipeline(ctx context.Context, in *PipelineGraphReq, opts ...grpc.CallOption) (*PipelineGraphResp, error) {
	out := new(PipelineGraphResp)
	err := c.cc.Invoke(ctx, ApiGrpc_GraphForPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetPipeline(ctx context.Context, in *GetPipelineReq, opts ...grpc.CallOption) (*PipelineDef, error) {
	out := new(PipelineDef)
	err := c.cc.Invoke(ctx, ApiGrpc_GetPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) CreateJob(ctx context.Context, in *CreateJobReq, opts ...grpc.CallOption) (*CreateJobResp, error) {
	out := new(CreateJobResp)
	err := c.cc.Invoke(ctx, ApiGrpc_CreateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) DeleteJob(ctx context.Context, in *DeleteJobReq, opts ...grpc.CallOption) (*DeleteJobResp, error) {
	out := new(DeleteJobResp)
	err := c.cc.Invoke(ctx, ApiGrpc_DeleteJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) StartPipeline(ctx context.Context, in *CreatePipelineReq, opts ...grpc.CallOption) (*CreateJobResp, error) {
	out := new(CreateJobResp)
	err := c.cc.Invoke(ctx, ApiGrpc_StartPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) PreviewPipeline(ctx context.Context, in *CreatePipelineReq, opts ...grpc.CallOption) (*CreateJobResp, error) {
	out := new(CreateJobResp)
	err := c.cc.Invoke(ctx, ApiGrpc_PreviewPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetJobs(ctx context.Context, in *GetJobsReq, opts ...grpc.CallOption) (*GetJobsResp, error) {
	out := new(GetJobsResp)
	err := c.cc.Invoke(ctx, ApiGrpc_GetJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetJobDetails(ctx context.Context, in *JobDetailsReq, opts ...grpc.CallOption) (*JobDetailsResp, error) {
	out := new(JobDetailsResp)
	err := c.cc.Invoke(ctx, ApiGrpc_GetJobDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetCheckpoints(ctx context.Context, in *JobCheckpointsReq, opts ...grpc.CallOption) (*JobCheckpointsResp, error) {
	out := new(JobCheckpointsResp)
	err := c.cc.Invoke(ctx, ApiGrpc_GetCheckpoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetCheckpointDetail(ctx context.Context, in *CheckpointDetailsReq, opts ...grpc.CallOption) (*CheckpointDetailsResp, error) {
	out := new(CheckpointDetailsResp)
	err := c.cc.Invoke(ctx, ApiGrpc_GetCheckpointDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetOperatorErrors(ctx context.Context, in *OperatorErrorsReq, opts ...grpc.CallOption) (*OperatorErrorsRes, error) {
	out := new(OperatorErrorsRes)
	err := c.cc.Invoke(ctx, ApiGrpc_GetOperatorErrors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) GetJobMetrics(ctx context.Context, in *JobMetricsReq, opts ...grpc.CallOption) (*JobMetricsResp, error) {
	out := new(JobMetricsResp)
	err := c.cc.Invoke(ctx, ApiGrpc_GetJobMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) UpdateJob(ctx context.Context, in *UpdateJobReq, opts ...grpc.CallOption) (*UpdateJobResp, error) {
	out := new(UpdateJobResp)
	err := c.cc.Invoke(ctx, ApiGrpc_UpdateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) SubscribeToOutput(ctx context.Context, in *GrpcOutputSubscription, opts ...grpc.CallOption) (ApiGrpc_SubscribeToOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiGrpc_ServiceDesc.Streams[1], ApiGrpc_SubscribeToOutput_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGrpcSubscribeToOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiGrpc_SubscribeToOutputClient interface {
	Recv() (*OutputData, error)
	grpc.ClientStream
}

type apiGrpcSubscribeToOutputClient struct {
	grpc.ClientStream
}

func (x *apiGrpcSubscribeToOutputClient) Recv() (*OutputData, error) {
	m := new(OutputData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiGrpcServer is the server API for ApiGrpc service.
// All implementations must embed UnimplementedApiGrpcServer
// for forward compatibility
type ApiGrpcServer interface {
	CreateConnection(context.Context, *CreateConnectionReq) (*CreateConnectionResp, error)
	TestConnection(context.Context, *CreateConnectionReq) (*TestSourceMessage, error)
	GetConnections(context.Context, *GetConnectionsReq) (*GetConnectionsResp, error)
	DeleteConnection(context.Context, *DeleteConnectionReq) (*DeleteConnectionResp, error)
	CreateSource(context.Context, *CreateSourceReq) (*CreateSourceResp, error)
	GetSources(context.Context, *GetSourcesReq) (*GetSourcesResp, error)
	DeleteSource(context.Context, *DeleteSourceReq) (*DeleteSourceResp, error)
	CreateSink(context.Context, *CreateSinkReq) (*CreateSinkResp, error)
	GetSinks(context.Context, *GetSinksReq) (*GetSinksResp, error)
	DeleteSink(context.Context, *DeleteSinkReq) (*DeleteSinkResp, error)
	GetConfluentSchema(context.Context, *ConfluentSchemaReq) (*ConfluentSchemaResp, error)
	GetSourceMetadata(context.Context, *CreateSourceReq) (*SourceMetadataResp, error)
	TestSchema(context.Context, *CreateSourceReq) (*TestSchemaResp, error)
	TestSource(*CreateSourceReq, ApiGrpc_TestSourceServer) error
	CreatePipeline(context.Context, *CreatePipelineReq) (*CreatePipelineResp, error)
	GraphForPipeline(context.Context, *PipelineGraphReq) (*PipelineGraphResp, error)
	GetPipeline(context.Context, *GetPipelineReq) (*PipelineDef, error)
	CreateJob(context.Context, *CreateJobReq) (*CreateJobResp, error)
	DeleteJob(context.Context, *DeleteJobReq) (*DeleteJobResp, error)
	StartPipeline(context.Context, *CreatePipelineReq) (*CreateJobResp, error)
	PreviewPipeline(context.Context, *CreatePipelineReq) (*CreateJobResp, error)
	GetJobs(context.Context, *GetJobsReq) (*GetJobsResp, error)
	GetJobDetails(context.Context, *JobDetailsReq) (*JobDetailsResp, error)
	GetCheckpoints(context.Context, *JobCheckpointsReq) (*JobCheckpointsResp, error)
	GetCheckpointDetail(context.Context, *CheckpointDetailsReq) (*CheckpointDetailsResp, error)
	GetOperatorErrors(context.Context, *OperatorErrorsReq) (*OperatorErrorsRes, error)
	GetJobMetrics(context.Context, *JobMetricsReq) (*JobMetricsResp, error)
	UpdateJob(context.Context, *UpdateJobReq) (*UpdateJobResp, error)
	SubscribeToOutput(*GrpcOutputSubscription, ApiGrpc_SubscribeToOutputServer) error
	mustEmbedUnimplementedApiGrpcServer()
}

// UnimplementedApiGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedApiGrpcServer struct {
}

func (UnimplementedApiGrpcServer) CreateConnection(context.Context, *CreateConnectionReq) (*CreateConnectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedApiGrpcServer) TestConnection(context.Context, *CreateConnectionReq) (*TestSourceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (UnimplementedApiGrpcServer) GetConnections(context.Context, *GetConnectionsReq) (*GetConnectionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (UnimplementedApiGrpcServer) DeleteConnection(context.Context, *DeleteConnectionReq) (*DeleteConnectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedApiGrpcServer) CreateSource(context.Context, *CreateSourceReq) (*CreateSourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSource not implemented")
}
func (UnimplementedApiGrpcServer) GetSources(context.Context, *GetSourcesReq) (*GetSourcesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSources not implemented")
}
func (UnimplementedApiGrpcServer) DeleteSource(context.Context, *DeleteSourceReq) (*DeleteSourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSource not implemented")
}
func (UnimplementedApiGrpcServer) CreateSink(context.Context, *CreateSinkReq) (*CreateSinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSink not implemented")
}
func (UnimplementedApiGrpcServer) GetSinks(context.Context, *GetSinksReq) (*GetSinksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSinks not implemented")
}
func (UnimplementedApiGrpcServer) DeleteSink(context.Context, *DeleteSinkReq) (*DeleteSinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSink not implemented")
}
func (UnimplementedApiGrpcServer) GetConfluentSchema(context.Context, *ConfluentSchemaReq) (*ConfluentSchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfluentSchema not implemented")
}
func (UnimplementedApiGrpcServer) GetSourceMetadata(context.Context, *CreateSourceReq) (*SourceMetadataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceMetadata not implemented")
}
func (UnimplementedApiGrpcServer) TestSchema(context.Context, *CreateSourceReq) (*TestSchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestSchema not implemented")
}
func (UnimplementedApiGrpcServer) TestSource(*CreateSourceReq, ApiGrpc_TestSourceServer) error {
	return status.Errorf(codes.Unimplemented, "method TestSource not implemented")
}
func (UnimplementedApiGrpcServer) CreatePipeline(context.Context, *CreatePipelineReq) (*CreatePipelineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (UnimplementedApiGrpcServer) GraphForPipeline(context.Context, *PipelineGraphReq) (*PipelineGraphResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GraphForPipeline not implemented")
}
func (UnimplementedApiGrpcServer) GetPipeline(context.Context, *GetPipelineReq) (*PipelineDef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (UnimplementedApiGrpcServer) CreateJob(context.Context, *CreateJobReq) (*CreateJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedApiGrpcServer) DeleteJob(context.Context, *DeleteJobReq) (*DeleteJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedApiGrpcServer) StartPipeline(context.Context, *CreatePipelineReq) (*CreateJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPipeline not implemented")
}
func (UnimplementedApiGrpcServer) PreviewPipeline(context.Context, *CreatePipelineReq) (*CreateJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewPipeline not implemented")
}
func (UnimplementedApiGrpcServer) GetJobs(context.Context, *GetJobsReq) (*GetJobsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedApiGrpcServer) GetJobDetails(context.Context, *JobDetailsReq) (*JobDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobDetails not implemented")
}
func (UnimplementedApiGrpcServer) GetCheckpoints(context.Context, *JobCheckpointsReq) (*JobCheckpointsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpoints not implemented")
}
func (UnimplementedApiGrpcServer) GetCheckpointDetail(context.Context, *CheckpointDetailsReq) (*CheckpointDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointDetail not implemented")
}
func (UnimplementedApiGrpcServer) GetOperatorErrors(context.Context, *OperatorErrorsReq) (*OperatorErrorsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorErrors not implemented")
}
func (UnimplementedApiGrpcServer) GetJobMetrics(context.Context, *JobMetricsReq) (*JobMetricsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobMetrics not implemented")
}
func (UnimplementedApiGrpcServer) UpdateJob(context.Context, *UpdateJobReq) (*UpdateJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedApiGrpcServer) SubscribeToOutput(*GrpcOutputSubscription, ApiGrpc_SubscribeToOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToOutput not implemented")
}
func (UnimplementedApiGrpcServer) mustEmbedUnimplementedApiGrpcServer() {}

// UnsafeApiGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiGrpcServer will
// result in compilation errors.
type UnsafeApiGrpcServer interface {
	mustEmbedUnimplementedApiGrpcServer()
}

func RegisterApiGrpcServer(s grpc.ServiceRegistrar, srv ApiGrpcServer) {
	s.RegisterService(&ApiGrpc_ServiceDesc, srv)
}

func _ApiGrpc_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).CreateConnection(ctx, req.(*CreateConnectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_TestConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).TestConnection(ctx, req.(*CreateConnectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetConnections(ctx, req.(*GetConnectionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).DeleteConnection(ctx, req.(*DeleteConnectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_CreateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).CreateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_CreateSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).CreateSource(ctx, req.(*CreateSourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetSources(ctx, req.(*GetSourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_DeleteSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).DeleteSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_DeleteSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).DeleteSource(ctx, req.(*DeleteSourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_CreateSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).CreateSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_CreateSink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).CreateSink(ctx, req.(*CreateSinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetSinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSinksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetSinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetSinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetSinks(ctx, req.(*GetSinksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_DeleteSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).DeleteSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_DeleteSink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).DeleteSink(ctx, req.(*DeleteSinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetConfluentSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfluentSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetConfluentSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetConfluentSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetConfluentSchema(ctx, req.(*ConfluentSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetSourceMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetSourceMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetSourceMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetSourceMetadata(ctx, req.(*CreateSourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_TestSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).TestSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_TestSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).TestSchema(ctx, req.(*CreateSourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_TestSource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateSourceReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiGrpcServer).TestSource(m, &apiGrpcTestSourceServer{stream})
}

type ApiGrpc_TestSourceServer interface {
	Send(*TestSourceMessage) error
	grpc.ServerStream
}

type apiGrpcTestSourceServer struct {
	grpc.ServerStream
}

func (x *apiGrpcTestSourceServer) Send(m *TestSourceMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiGrpc_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_CreatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).CreatePipeline(ctx, req.(*CreatePipelineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GraphForPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineGraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GraphForPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GraphForPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GraphForPipeline(ctx, req.(*PipelineGraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetPipeline(ctx, req.(*GetPipelineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).CreateJob(ctx, req.(*CreateJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).DeleteJob(ctx, req.(*DeleteJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_StartPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).StartPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_StartPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).StartPipeline(ctx, req.(*CreatePipelineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_PreviewPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).PreviewPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_PreviewPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).PreviewPipeline(ctx, req.(*CreatePipelineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetJobs(ctx, req.(*GetJobsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetJobDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetJobDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetJobDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetJobDetails(ctx, req.(*JobDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCheckpointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetCheckpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetCheckpoints(ctx, req.(*JobCheckpointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetCheckpointDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetCheckpointDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetCheckpointDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetCheckpointDetail(ctx, req.(*CheckpointDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetOperatorErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorErrorsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetOperatorErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetOperatorErrors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetOperatorErrors(ctx, req.(*OperatorErrorsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_GetJobMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobMetricsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).GetJobMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_GetJobMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).GetJobMetrics(ctx, req.(*JobMetricsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGrpc_UpdateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).UpdateJob(ctx, req.(*UpdateJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_SubscribeToOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GrpcOutputSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiGrpcServer).SubscribeToOutput(m, &apiGrpcSubscribeToOutputServer{stream})
}

type ApiGrpc_SubscribeToOutputServer interface {
	Send(*OutputData) error
	grpc.ServerStream
}

type apiGrpcSubscribeToOutputServer struct {
	grpc.ServerStream
}

func (x *apiGrpcSubscribeToOutputServer) Send(m *OutputData) error {
	return x.ServerStream.SendMsg(m)
}

// ApiGrpc_ServiceDesc is the grpc.ServiceDesc for ApiGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arroyo_api.ApiGrpc",
	HandlerType: (*ApiGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConnection",
			Handler:    _ApiGrpc_CreateConnection_Handler,
		},
		{
			MethodName: "TestConnection",
			Handler:    _ApiGrpc_TestConnection_Handler,
		},
		{
			MethodName: "GetConnections",
			Handler:    _ApiGrpc_GetConnections_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _ApiGrpc_DeleteConnection_Handler,
		},
		{
			MethodName: "CreateSource",
			Handler:    _ApiGrpc_CreateSource_Handler,
		},
		{
			MethodName: "GetSources",
			Handler:    _ApiGrpc_GetSources_Handler,
		},
		{
			MethodName: "DeleteSource",
			Handler:    _ApiGrpc_DeleteSource_Handler,
		},
		{
			MethodName: "CreateSink",
			Handler:    _ApiGrpc_CreateSink_Handler,
		},
		{
			MethodName: "GetSinks",
			Handler:    _ApiGrpc_GetSinks_Handler,
		},
		{
			MethodName: "DeleteSink",
			Handler:    _ApiGrpc_DeleteSink_Handler,
		},
		{
			MethodName: "GetConfluentSchema",
			Handler:    _ApiGrpc_GetConfluentSchema_Handler,
		},
		{
			MethodName: "GetSourceMetadata",
			Handler:    _ApiGrpc_GetSourceMetadata_Handler,
		},
		{
			MethodName: "TestSchema",
			Handler:    _ApiGrpc_TestSchema_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _ApiGrpc_CreatePipeline_Handler,
		},
		{
			MethodName: "GraphForPipeline",
			Handler:    _ApiGrpc_GraphForPipeline_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _ApiGrpc_GetPipeline_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _ApiGrpc_CreateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _ApiGrpc_DeleteJob_Handler,
		},
		{
			MethodName: "StartPipeline",
			Handler:    _ApiGrpc_StartPipeline_Handler,
		},
		{
			MethodName: "PreviewPipeline",
			Handler:    _ApiGrpc_PreviewPipeline_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _ApiGrpc_GetJobs_Handler,
		},
		{
			MethodName: "GetJobDetails",
			Handler:    _ApiGrpc_GetJobDetails_Handler,
		},
		{
			MethodName: "GetCheckpoints",
			Handler:    _ApiGrpc_GetCheckpoints_Handler,
		},
		{
			MethodName: "GetCheckpointDetail",
			Handler:    _ApiGrpc_GetCheckpointDetail_Handler,
		},
		{
			MethodName: "GetOperatorErrors",
			Handler:    _ApiGrpc_GetOperatorErrors_Handler,
		},
		{
			MethodName: "GetJobMetrics",
			Handler:    _ApiGrpc_GetJobMetrics_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _ApiGrpc_UpdateJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestSource",
			Handler:       _ApiGrpc_TestSource_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToOutput",
			Handler:       _ApiGrpc_SubscribeToOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}
