syntax = "proto3";

package arroyo_api;

// Job management


message CreateSqlJob {
  string query = 1;
  uint64 parallelism = 2;

  repeated Udf udfs = 5;

  bool preview = 6;
}

message CreatePipelineReq {
  string name = 1;
  oneof config {
    bytes program = 2;
    CreateSqlJob sql = 3;
  }
}

message Udf {
  string definition = 2;
}

message CreateJobReq {
  string pipeline_id = 1;
  uint64 checkpoint_interval_micros = 2;
  bool preview = 3;
}

// Program

message PipelineProgramUdf {
  string name = 1;
  string definition = 2;
}

message PipelineProgram {
  repeated string types = 1;
  repeated string other_defs = 2;
  repeated PipelineProgramUdf udfs = 5;
  repeated ProgramNode nodes = 3;
  repeated ProgramEdge edges = 4;
}

message ProgramNode {
  int32 node_index = 1;
  string node_id = 2;
  int32 parallelism = 3;
  Operator operator = 4;
}

message ProgramEdge {
  int32 upstream_node = 1;
  int32 downstream_node = 2;
  string key_type = 3;
  string value_type = 4;
  EdgeType edge_type = 5;
}

message ConnectorOp {
  string operator = 1;
  string config = 2;
  string description = 3;
}

message Operator {
  oneof operator {
    ConnectorOp connector_source = 3;
    ConnectorOp connector_sink = 22;
    WasmUdfs wasm_udfs = 4;
    WindowOperator window = 5;
    Aggregator aggregator = 6;
    PeriodicWatermark periodic_watermark = 7;
    Window window_join = 10;
    ExpressionOperator expression_operator = 13;
    Flatten flatten = 14;
    FlattenExpressionOperator flatten_expression_operator = 15;
    FlatMapOperator flat_map_operator = 27;
    SlidingWindowAggregator sliding_window_aggregator = 17;
    TumblingWindowAggregator tumbling_window_aggregator = 18;
    TumblingTopN tumbling_top_n = 19;
    SlidingAggregatingTopN sliding_aggregating_top_n = 20;
    JoinWithExpiration join_with_expiration = 21;
    ExpressionWatermark expression_watermark = 23;
    UpdatingOperator updating_operator = 24;
    NonWindowAggregator non_window_aggregator = 25;
    UpdatingKeyOperator updating_key_operator = 26;
  }
}

message WasmUdfs {
  string name = 1;
  repeated WasmFunction wasm_functions = 2;
}

message WasmFunction{
  WasmBehavior behavior = 1;
  string name = 2;
  string key_arg = 3;
  string key_arg_type = 4;
  string value_arg = 5;
  string value_arg_type = 6;
  string return_type = 7;
  string body = 8;
}

enum WasmBehavior {
  MAP = 0;
  OPT_MAP = 1;
  FILTER = 2;
  TIMESTAMP = 3;
  KEY_BY = 4;
}

message WindowOperator {
  optional Aggregator aggregator = 1;
  optional ExpressionAggregator expression_aggregator = 3;
  bool flatten = 4;
  Window window = 2;
}

message Window {
  oneof window {
    SlidingWindow sliding_window = 2;
    TumblingWindow tumbling_window = 3;
    InstantWindow instant_window = 4;
    SessionWindow session_window = 5;
  }
}

message SlidingWindow {
  uint64 size_micros = 1;
  uint64 slide_micros = 2;

}
message TumblingWindow {
  uint64 size_micros = 1;
}
message InstantWindow {}

message SessionWindow {
  uint64 gap_micros = 1;
}

enum Aggregator {
  NONE = 0;
  COUNT_AGGREGATE = 1;
  MAX_AGGREGATE = 2;
  MIN_AGGREGATE = 3;
  SUM_AGGREGATE = 4;
}

message ExpressionAggregator {
  string name = 1;
  string expression = 2;
}

message PeriodicWatermark {
  uint64 period_micros = 1;
  uint64 max_lateness_micros = 2;
  optional uint64 idle_time_micros = 3;
}

message ExpressionWatermark {
  uint64 period_micros = 1;
  string expression = 2;
  optional uint64 idle_time_micros = 3;
}

message ExpressionOperator {
  string name = 1;
  string expression= 2;
  ExpressionReturnType return_type = 3;
}

message Flatten {
  string name = 1;
}

message FlattenExpressionOperator {
  string name = 1;
  string expression= 2;
  ExpressionReturnType return_type = 3;
}

message FlatMapOperator {
  string name = 1;
  string expression = 2;
}

message SlidingWindowAggregator {
  uint64 width_micros = 1;
  uint64 slide_micros = 2;
  string aggregator = 3;
  string bin_merger = 4;
  string in_memory_add = 5;
  string in_memory_remove = 6;
  string bin_type = 7;
  string mem_type = 8;
}

message TumblingWindowAggregator {
  uint64 width_micros = 1;
  string aggregator = 3;
  string bin_merger = 4;
  string bin_type = 7;
}

message TumblingTopN {
  uint64 width_micros = 1;
  uint64 max_elements = 2;
  string extractor = 3;
  string partition_key_type = 4;
  string converter = 5;
}

message SlidingAggregatingTopN {
  uint64 width_micros = 1;
  uint64 slide_micros = 2;
  string bin_merger = 3;
  string in_memory_add = 4;
  string in_memory_remove = 5;
  string partitioning_func = 6;
  string extractor = 7;
  string aggregator = 8;
  string bin_type = 9;
  string mem_type = 10;
  string sort_key_type = 11;
  uint64 max_elements = 12;
}

message JoinWithExpiration {
  uint64 left_expiration_micros = 1;
  uint64 right_expiration_micros = 2;
  JoinType join_type = 3;
}

message UpdatingOperator {
  string name = 1;
  string expression = 2;
}

message NonWindowAggregator {
  uint64 expiration_micros = 1;
  string aggregator = 2;
  string bin_merger = 3;
  string bin_type = 4;
}

message UpdatingKeyOperator {
  string name = 1;
  string expression = 2;
}

enum ExpressionReturnType {
  UNUSED_ERT = 0;
  PREDICATE = 1;
  RECORD = 2;
  OPTIONAL_RECORD = 3;
}

enum JoinType {
  INNER = 0;
  LEFT = 1;
  RIGHT = 2;
  FULL = 3;
}

enum OffsetMode {
  EARLIEST = 0;
  LATEST = 1;
}

enum EdgeType {
  UNUSED = 0;
  FORWARD = 1;
  SHUFFLE = 2;
  LEFT_JOIN = 3;
  RIGHT_JOIN = 4;
}

// job status

message JobStatus {
  string job_id = 1;
  string pipeline_name = 2;
  bool running_desired = 8;
  string state = 3;
  uint64 run_id = 11;
  string pipeline_id = 9;
  optional uint64 start_time = 4;
  optional uint64 finish_time = 5;
  optional uint64 tasks = 6;
  optional string definition = 7;
  repeated Udf udfs = 12;
  optional string failure_message = 10;
}

message JobStatusResp {
  JobStatus job_status = 1;
}

message JobDetailsReq {
  string job_id = 1;
}

message JobNode {
  string node_id = 1;
  string operator = 2;
  uint32 parallelism = 3;
}

message JobEdge {
  string src_id = 1;
  string dest_id = 2;
  string key_type = 3;
  string value_type = 4;
  string edge_type = 5;
}

message JobGraph {
  repeated JobNode nodes = 1;
  repeated JobEdge edges = 2;
}

// Checkpoints

enum TaskCheckpointEventType {
  ALIGNMENT_STARTED = 0;
  CHECKPOINT_STARTED = 1;
  CHECKPOINT_OPERATOR_FINISHED = 2;
  CHECKPOINT_SYNC_FINISHED = 3;
  CHECKPOINT_PRE_COMMIT = 4;
}

message TaskCheckpointEvent {
  uint64 time = 1;
  TaskCheckpointEventType event_type = 2;
}

message TaskCheckpointDetail {
  uint32 subtask_index = 1;
  uint64 start_time = 2;
  optional uint64 finish_time = 3;
  optional uint64 bytes = 4;
  repeated TaskCheckpointEvent events = 5;
}

message OperatorCheckpointDetail {
  string operator_id = 1;
  uint64 start_time = 2;
  optional uint64 finish_time = 3;
  bool has_state = 4;
  map<uint32, TaskCheckpointDetail> tasks = 5;
}
