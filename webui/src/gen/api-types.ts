/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/connection_profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all connection profiles */
        get: operations["get_connection_profiles"];
        put?: never;
        /** Create connection profile */
        post: operations["create_connection_profile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/connection_profiles/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test connection profile */
        post: operations["test_connection_profile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/connection_profiles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a Connection Profile */
        delete: operations["delete_connection_profile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/connection_profiles/{id}/autocomplete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get autocomplete suggestions for a connection profile */
        get: operations["get_connection_profile_autocomplete"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/connection_tables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all connection tables */
        get: operations["get_connection_tables"];
        put?: never;
        /** Create a new connection table */
        post: operations["create_connection_table"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/connection_tables/schemas/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test a Connection Schema */
        post: operations["test_schema"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/connection_tables/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test a Connection Table */
        post: operations["test_connection_table"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/connection_tables/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a Connection Table */
        delete: operations["delete_connection_table"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/connectors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all connectors */
        get: operations["get_connectors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all jobs */
        get: operations["get_jobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Ping endpoint */
        get: operations["ping"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all pipelines */
        get: operations["get_pipelines"];
        put?: never;
        /**
         * Create a new pipeline
         * @description The API will create a single job for the pipeline.
         */
        post: operations["create_pipeline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new preview pipeline */
        post: operations["create_preview_pipeline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/validate_query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate a query and return pipeline graph */
        post: operations["validate_query"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single pipeline */
        get: operations["get_pipeline"];
        put?: never;
        post?: never;
        /** Delete a pipeline */
        delete: operations["delete_pipeline"];
        options?: never;
        head?: never;
        /** Update a pipeline */
        patch: operations["patch_pipeline"];
        trace?: never;
    };
    "/v1/pipelines/{id}/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List a pipeline's jobs */
        get: operations["get_pipeline_jobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{id}/restart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restart a pipeline */
        post: operations["restart_pipeline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{pipeline_id}/jobs/{job_id}/checkpoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List a job's checkpoints */
        get: operations["get_job_checkpoints"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{pipeline_id}/jobs/{job_id}/checkpoints/{epoch}/operator_checkpoint_groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a checkpoint's details */
        get: operations["get_checkpoint_details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{pipeline_id}/jobs/{job_id}/errors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List a job's error messages */
        get: operations["get_job_errors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{pipeline_id}/jobs/{job_id}/operator_metric_groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a job's metrics */
        get: operations["get_operator_metric_groups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{pipeline_id}/jobs/{job_id}/output": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Subscribe to a job's output */
        get: operations["get_job_output"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/udfs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Global UDFs */
        get: operations["get_udfs"];
        put?: never;
        /** Create a global UDF */
        post: operations["create_udf"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/udfs/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate UDFs */
        post: operations["validate_udf"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/udfs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete UDF */
        delete: operations["delete_udf"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AvroFormat: {
            confluent_schema_registry?: boolean;
            into_unstructured_json?: boolean;
            raw_datums?: boolean;
            readonly reader_schema?: string;
            /** Format: int32 */
            readonly schema_id?: number | null;
        };
        BadData: {
            /** @enum {string} */
            behavior: "fail";
        } | {
            /** @enum {string} */
            behavior: "drop";
        };
        Checkpoint: {
            backend: string;
            /** Format: int32 */
            epoch: number;
            events: components["schemas"]["CheckpointEventSpan"][];
            /** Format: int64 */
            finish_time?: number | null;
            /** Format: int64 */
            start_time: number;
        };
        CheckpointCollection: {
            data: components["schemas"]["Checkpoint"][];
        };
        CheckpointEventSpan: {
            description: string;
            event: string;
            /** Format: int64 */
            finish_time: number;
            /** Format: int64 */
            start_time: number;
        };
        ConnectionAutocompleteResp: {
            values: {
                [key: string]: string[];
            };
        };
        ConnectionProfile: {
            config: unknown;
            connector: string;
            description: string;
            id: string;
            name: string;
        };
        ConnectionProfileCollection: {
            data: components["schemas"]["ConnectionProfile"][];
        };
        ConnectionProfilePost: {
            config: unknown;
            connector: string;
            name: string;
        };
        ConnectionSchema: {
            bad_data?: Omit<components["schemas"]["BadData"], "behavior"> | null;
            definition?: Omit<components["schemas"]["SchemaDefinition"], "type"> | null;
            fields?: components["schemas"]["SourceField"][];
            format?: Omit<components["schemas"]["Format"], "type"> | null;
            framing?: Omit<components["schemas"]["Framing"], "method"> | null;
            inferred?: boolean | null;
            primary_keys?: string[];
        };
        ConnectionTable: {
            config: unknown;
            connection_profile?: components["schemas"]["ConnectionProfile"] | null;
            connector: string;
            /** Format: int32 */
            consumers: number;
            /** Format: int64 */
            created_at: number;
            id: string;
            name: string;
            schema: components["schemas"]["ConnectionSchema"];
            table_type: components["schemas"]["ConnectionType"];
        };
        ConnectionTableCollection: {
            data: components["schemas"]["ConnectionTable"][];
            hasMore: boolean;
        };
        ConnectionTablePost: {
            config: unknown;
            connection_profile_id?: string | null;
            connector: string;
            name: string;
            schema?: components["schemas"]["ConnectionSchema"] | null;
        };
        /** @enum {string} */
        ConnectionType: "source" | "sink" | "lookup";
        Connector: {
            connection_config?: string | null;
            custom_schemas: boolean;
            description: string;
            enabled: boolean;
            hidden: boolean;
            icon: string;
            id: string;
            name: string;
            sink: boolean;
            source: boolean;
            table_config: string;
            testing: boolean;
        };
        ConnectorCollection: {
            data: components["schemas"]["Connector"][];
        };
        /** @enum {string} */
        DecimalEncoding: "number" | "string" | "bytes";
        ErrorResp: {
            error: string;
        };
        FieldType: {
            /** @enum {string} */
            type: "int32";
        } | {
            /** @enum {string} */
            type: "int64";
        } | {
            /** @enum {string} */
            type: "u_int32";
        } | {
            /** @enum {string} */
            type: "u_int64";
        } | {
            /** @enum {string} */
            type: "f32";
        } | {
            /** @enum {string} */
            type: "f64";
        } | {
            /** @enum {string} */
            type: "bool";
        } | {
            /** @enum {string} */
            type: "string";
        } | {
            /** @enum {string} */
            type: "bytes";
        } | ({
            type: "FieldType";
        } & (components["schemas"]["TimestampField"] & {
            /** @enum {string} */
            type: "timestamp";
        })) | {
            /** @enum {string} */
            type: "json";
        } | ({
            type: "FieldType";
        } & (components["schemas"]["StructField"] & {
            /** @enum {string} */
            type: "struct";
        })) | ({
            type: "FieldType";
        } & (components["schemas"]["ListField"] & {
            /** @enum {string} */
            type: "list";
        }));
        Format: ({
            type: "Format";
        } & (components["schemas"]["JsonFormat"] & {
            /** @enum {string} */
            type: "json";
        })) | ({
            type: "Format";
        } & (components["schemas"]["AvroFormat"] & {
            /** @enum {string} */
            type: "avro";
        })) | ({
            type: "Format";
        } & (components["schemas"]["ProtobufFormat"] & {
            /** @enum {string} */
            type: "protobuf";
        })) | ({
            type: "Format";
        } & (components["schemas"]["ParquetFormat"] & {
            /** @enum {string} */
            type: "parquet";
        })) | ({
            type: "Format";
        } & (components["schemas"]["RawStringFormat"] & {
            /** @enum {string} */
            type: "raw_string";
        })) | ({
            type: "Format";
        } & (components["schemas"]["RawBytesFormat"] & {
            /** @enum {string} */
            type: "raw_bytes";
        }));
        Framing: {
            method: "Framing";
        } & (components["schemas"]["NewlineDelimitedFraming"] & {
            /** @enum {string} */
            method: "newline";
        });
        GlobalUdf: {
            /** Format: int64 */
            created_at: number;
            definition: string;
            description?: string | null;
            dylib_url?: string | null;
            id: string;
            language: components["schemas"]["UdfLanguage"];
            name: string;
            prefix: string;
            /** Format: int64 */
            updated_at: number;
        };
        GlobalUdfCollection: {
            data: components["schemas"]["GlobalUdf"][];
        };
        Job: {
            /** Format: int64 */
            created_at: number;
            failure_message?: string | null;
            /** Format: int64 */
            finish_time?: number | null;
            id: string;
            /** Format: int64 */
            run_id: number;
            running_desired: boolean;
            /** Format: int64 */
            start_time?: number | null;
            state: string;
            /** Format: int64 */
            tasks?: number | null;
        };
        JobCollection: {
            data: components["schemas"]["Job"][];
        };
        /** @enum {string} */
        JobLogLevel: "info" | "warn" | "error";
        JobLogMessage: {
            /** Format: int64 */
            created_at: number;
            details: string;
            id: string;
            level: components["schemas"]["JobLogLevel"];
            message: string;
            operator_id?: string | null;
            /** Format: int64 */
            task_index?: number | null;
        };
        JobLogMessageCollection: {
            data: components["schemas"]["JobLogMessage"][];
            hasMore: boolean;
        };
        JsonFormat: {
            confluent_schema_registry?: boolean;
            debezium?: boolean;
            decimal_encoding?: components["schemas"]["DecimalEncoding"];
            include_schema?: boolean;
            /** Format: int32 */
            schema_id?: number | null;
            timestamp_format?: components["schemas"]["TimestampFormat"];
            unstructured?: boolean;
        };
        ListField: {
            items: components["schemas"]["SourceField"];
        };
        Metric: {
            /** Format: int64 */
            time: number;
            /** Format: double */
            value: number;
        };
        MetricGroup: {
            name: components["schemas"]["MetricName"];
            subtasks: components["schemas"]["SubtaskMetrics"][];
        };
        /** @enum {string} */
        MetricName: "bytes_recv" | "bytes_sent" | "messages_recv" | "messages_sent" | "backpressure" | "tx_queue_size" | "tx_queue_rem";
        NewlineDelimitedFraming: {
            /** Format: int64 */
            max_line_length?: number | null;
        };
        OperatorCheckpointGroup: {
            /** Format: int64 */
            bytes: number;
            /** Format: int64 */
            finish_time?: number | null;
            operator_id: string;
            /** Format: int64 */
            started_metadata_write?: number | null;
            subtasks: components["schemas"]["SubtaskCheckpointGroup"][];
        };
        OperatorCheckpointGroupCollection: {
            data: components["schemas"]["OperatorCheckpointGroup"][];
        };
        OperatorMetricGroup: {
            metric_groups: components["schemas"]["MetricGroup"][];
            /** Format: int32 */
            node_id: number;
        };
        OperatorMetricGroupCollection: {
            data: components["schemas"]["OperatorMetricGroup"][];
        };
        OutputData: {
            batch: string;
            operator_id: string;
            /** Format: int64 */
            start_id: number;
            /** Format: int32 */
            subtask_idx: number;
            timestamps: number[];
        };
        PaginationQueryParams: {
            /** Format: int32 */
            limit?: number | null;
            starting_after?: string | null;
        };
        /** @enum {string} */
        ParquetCompression: "uncompressed" | "snappy" | "gzip" | "zstd" | "lz4";
        ParquetFormat: {
            compression?: components["schemas"]["ParquetCompression"];
            /** Format: int64 */
            row_group_bytes?: number | null;
        };
        Pipeline: {
            action?: components["schemas"]["StopType"] | null;
            action_in_progress: boolean;
            action_text: string;
            /** Format: int64 */
            checkpoint_interval_micros: number;
            /** Format: int64 */
            created_at: number;
            graph: components["schemas"]["PipelineGraph"];
            id: string;
            name: string;
            preview: boolean;
            query: string;
            stop: components["schemas"]["StopType"];
            udfs: components["schemas"]["Udf"][];
        };
        PipelineCollection: {
            data: components["schemas"]["Pipeline"][];
            hasMore: boolean;
        };
        PipelineEdge: {
            /** Format: int32 */
            dest_id: number;
            edge_type: string;
            key_type: string;
            /** Format: int32 */
            src_id: number;
            value_type: string;
        };
        PipelineGraph: {
            edges: components["schemas"]["PipelineEdge"][];
            nodes: components["schemas"]["PipelineNode"][];
        };
        PipelineNode: {
            description: string;
            /** Format: int32 */
            node_id: number;
            operator: string;
            /** Format: int32 */
            parallelism: number;
        };
        PipelinePatch: {
            /** Format: int64 */
            checkpoint_interval_micros?: number | null;
            /** Format: int64 */
            parallelism?: number | null;
            stop?: components["schemas"]["StopType"] | null;
        };
        PipelinePost: {
            /** Format: int64 */
            checkpoint_interval_micros?: number | null;
            name: string;
            /** Format: int64 */
            parallelism: number;
            query: string;
            udfs?: components["schemas"]["Udf"][] | null;
        };
        PipelineRestart: {
            force?: boolean | null;
        };
        PreviewPost: {
            enable_sinks?: boolean;
            query: string;
            udfs?: components["schemas"]["Udf"][] | null;
        };
        ProtobufFormat: {
            /** Format: binary */
            compiled_schema?: string | null;
            confluent_schema_registry?: boolean;
            into_unstructured_json?: boolean;
            length_delimited?: boolean;
            message_name?: string | null;
        };
        QueryValidationResult: {
            errors: string[];
            graph?: components["schemas"]["PipelineGraph"] | null;
        };
        RawBytesFormat: Record<string, never>;
        RawStringFormat: Record<string, never>;
        SchemaDefinition: {
            schema: string;
            /** @enum {string} */
            type: "json_schema";
        } | {
            dependencies?: {
                [key: string]: string;
            };
            schema: string;
            /** @enum {string} */
            type: "protobuf_schema";
        } | {
            schema: string;
            /** @enum {string} */
            type: "avro_schema";
        };
        SourceField: {
            type: "SourceField";
        } & (Omit<components["schemas"]["FieldType"], "type"> & {
            metadata_key?: string | null;
            name: string;
            required?: boolean;
            sql_name?: string;
        });
        /** @enum {string} */
        StopType: "none" | "checkpoint" | "graceful" | "immediate" | "force";
        StructField: {
            fields: components["schemas"]["SourceField"][];
            name?: string | null;
        };
        SubtaskCheckpointGroup: {
            /** Format: int64 */
            bytes: number;
            event_spans: components["schemas"]["CheckpointEventSpan"][];
            /** Format: int32 */
            index: number;
        };
        SubtaskMetrics: {
            /** Format: int32 */
            index: number;
            metrics: components["schemas"]["Metric"][];
        };
        TestSourceMessage: {
            done: boolean;
            error: boolean;
            message: string;
        };
        TimestampField: {
            unit?: components["schemas"]["TimestampUnit"];
        };
        /** @enum {string} */
        TimestampFormat: "rfc3339" | "unix_millis";
        /** @enum {string} */
        TimestampUnit: "second" | "millisecond" | "microsecond" | "nanosecond";
        Udf: {
            definition: string;
            language?: components["schemas"]["UdfLanguage"];
        };
        /** @enum {string} */
        UdfLanguage: "python" | "rust";
        UdfPost: {
            definition: string;
            description?: string | null;
            language?: components["schemas"]["UdfLanguage"];
            prefix: string;
        };
        UdfValidationResult: {
            errors: string[];
            udf_name?: string | null;
        };
        ValidateQueryPost: {
            query: string;
            udfs?: components["schemas"]["Udf"][] | null;
        };
        ValidateUdfPost: {
            definition: string;
            language?: components["schemas"]["UdfLanguage"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_connection_profiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Got connections collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionProfileCollection"];
                };
            };
        };
    };
    create_connection_profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConnectionProfilePost"];
            };
        };
        responses: {
            /** @description Created connection profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionProfile"];
                };
            };
        };
    };
    test_connection_profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConnectionProfilePost"];
            };
        };
        responses: {
            /** @description Result of testing connection profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestSourceMessage"];
                };
            };
        };
    };
    delete_connection_profile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Connection Profile id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted connection profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_connection_profile_autocomplete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Connection Profile id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Autocomplete suggestions for connection profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionAutocompleteResp"];
                };
            };
        };
    };
    get_connection_tables: {
        parameters: {
            query?: {
                starting_after?: string | null;
                limit?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Got connection table collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionTableCollection"];
                };
            };
        };
    };
    create_connection_table: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConnectionTablePost"];
            };
        };
        responses: {
            /** @description Created connection table */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionTable"];
                };
            };
        };
    };
    test_schema: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConnectionSchema"];
            };
        };
        responses: {
            /** @description Schema is valid */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    test_connection_table: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConnectionTablePost"];
            };
        };
        responses: {
            /** @description Job output as 'text/event-stream' */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_connection_table: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Connection Table id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted connection table */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_connectors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Got connectors collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectorCollection"];
                };
            };
        };
    };
    get_jobs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all jobs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobCollection"];
                };
            };
        };
    };
    ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ping endpoint */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_pipelines: {
        parameters: {
            query?: {
                starting_after?: string | null;
                limit?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Got pipelines collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PipelineCollection"];
                };
            };
        };
    };
    create_pipeline: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PipelinePost"];
            };
        };
        responses: {
            /** @description Created pipeline and job */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pipeline"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResp"];
                };
            };
        };
    };
    create_preview_pipeline: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PreviewPost"];
            };
        };
        responses: {
            /** @description Created pipeline and job */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pipeline"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResp"];
                };
            };
        };
    };
    validate_query: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateQueryPost"];
            };
        };
        responses: {
            /** @description Validated query */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryValidationResult"];
                };
            };
        };
    };
    get_pipeline: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Pipeline id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Got pipeline */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pipeline"];
                };
            };
        };
    };
    delete_pipeline: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Pipeline id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted pipeline */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_pipeline: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Pipeline id */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PipelinePatch"];
            };
        };
        responses: {
            /** @description Updated pipeline */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pipeline"];
                };
            };
        };
    };
    get_pipeline_jobs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Pipeline id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Got jobs collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobCollection"];
                };
            };
        };
    };
    restart_pipeline: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Pipeline id */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PipelineRestart"];
            };
        };
        responses: {
            /** @description Updated pipeline */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pipeline"];
                };
            };
        };
    };
    get_job_checkpoints: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Pipeline id */
                pipeline_id: string;
                /** @description Job id */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Got job's checkpoints */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckpointCollection"];
                };
            };
        };
    };
    get_checkpoint_details: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Pipeline id */
                pipeline_id: string;
                /** @description Job id */
                job_id: string;
                /** @description Epoch */
                epoch: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Got checkpoint's details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OperatorCheckpointGroupCollection"];
                };
            };
        };
    };
    get_job_errors: {
        parameters: {
            query?: {
                /** @description Starting after */
                starting_after?: string | null;
                /** @description Limit */
                limit?: number | null;
            };
            header?: never;
            path: {
                /** @description Pipeline id */
                pipeline_id: string;
                /** @description Job id */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Got job's error messages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobLogMessageCollection"];
                };
            };
        };
    };
    get_operator_metric_groups: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Pipeline id */
                pipeline_id: string;
                /** @description Job id */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Got metric groups */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OperatorMetricGroupCollection"];
                };
            };
        };
    };
    get_job_output: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Pipeline id */
                pipeline_id: string;
                /** @description Job id */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Job output as 'text/event-stream' */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_udfs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of UDFs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GlobalUdfCollection"];
                };
            };
        };
    };
    create_udf: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UdfPost"];
            };
        };
        responses: {
            /** @description Created UDF */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Udf"];
                };
            };
        };
    };
    validate_udf: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateUdfPost"];
            };
        };
        responses: {
            /** @description Validated query */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UdfValidationResult"];
                };
            };
        };
    };
    delete_udf: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UDF id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted UDF */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
