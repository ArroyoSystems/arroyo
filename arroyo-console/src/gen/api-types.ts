/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/v1/connections": {
    get: operations["get_connections"];
    post: operations["create_connection"];
  };
  "/v1/connections/test": {
    post: operations["test_connection"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ConnectionCollection: {
      items: (components["schemas"]["PostConnections"])[];
    };
    ConnectionTestResult: {
      error: boolean;
      message: string;
    };
    ConnectionTypes: OneOf<[{
      http: components["schemas"]["HttpConnection"];
    }, {
      kafka: components["schemas"]["KafkaConnection"];
    }]>;
    HttpConnection: {
      /** @example Content-Type: application/json */
      headers: string;
      /** @example https://mstdn.social/api */
      url: string;
    };
    KafkaAuthConfig: {
      saslAuth?: components["schemas"]["SaslAuth"] | null;
    };
    KafkaConnection: {
      authConfig: components["schemas"]["KafkaAuthConfig"];
      bootstrapServers: string;
    };
    PostConnections: {
      config: components["schemas"]["ConnectionTypes"];
      /** @example mstdn */
      name: string;
    };
    SaslAuth: {
      mechanism: string;
      password: string;
      protocol: string;
      username: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  get_connections: {
    responses: {
      /** @description Connection retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ConnectionCollection"];
        };
      };
    };
  };
  create_connection: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostConnections"];
      };
    };
    responses: {
      /** @description Connection created successfully */
      200: never;
    };
  };
  test_connection: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostConnections"];
      };
    };
    responses: {
      /** @description Connection tested successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ConnectionTestResult"];
        };
      };
    };
  };
}
