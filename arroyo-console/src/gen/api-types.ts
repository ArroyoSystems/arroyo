/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/connectors": {
    /**
     * List all connectors 
     * @description List all connectors
     */
    get: operations["get_connectors"];
  };
  "/v1/jobs": {
    /**
     * Get all jobs 
     * @description Get all jobs
     */
    get: operations["get_jobs"];
  };
  "/v1/ping": {
    get: operations["ping"];
  };
  "/v1/pipelines": {
    /**
     * List all pipelines 
     * @description List all pipelines
     */
    get: operations["get_pipelines"];
    /**
     * Create a new pipeline 
     * @description Create a new pipeline
     * 
     * The API will create a single job for the pipeline.
     */
    post: operations["post_pipeline"];
  };
  "/v1/pipelines/validate": {
    /**
     * Get a pipeline graph 
     * @description Get a pipeline graph
     */
    post: operations["validate_pipeline"];
  };
  "/v1/pipelines/{id}": {
    /**
     * Get a single pipeline 
     * @description Get a single pipeline
     */
    get: operations["get_pipeline"];
    /**
     * Delete a pipeline 
     * @description Delete a pipeline
     */
    delete: operations["delete_pipeline"];
    /**
     * Update a pipeline 
     * @description Update a pipeline
     */
    patch: operations["patch_pipeline"];
  };
  "/v1/pipelines/{id}/jobs": {
    /**
     * List a pipeline's jobs 
     * @description List a pipeline's jobs
     */
    get: operations["get_pipeline_jobs"];
  };
  "/v1/pipelines/{pipeline_id}/jobs/{job_id}/checkpoints": {
    /**
     * List a job's checkpoints 
     * @description List a job's checkpoints
     */
    get: operations["get_job_checkpoints"];
  };
  "/v1/pipelines/{pipeline_id}/jobs/{job_id}/errors": {
    /**
     * List a job's error messages 
     * @description List a job's error messages
     */
    get: operations["get_job_errors"];
  };
  "/v1/pipelines/{pipeline_id}/jobs/{job_id}/operator_metric_groups": {
    /**
     * Get a job's metrics 
     * @description Get a job's metrics
     */
    get: operations["get_operator_metric_groups"];
  };
  "/v1/pipelines/{pipeline_id}/jobs/{job_id}/output": {
    /**
     * Subscribe to a job's output 
     * @description Subscribe to a job's output
     */
    get: operations["get_job_output"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Checkpoint: {
      backend: string;
      /** Format: int32 */
      epoch: number;
      /** Format: int64 */
      finishTime?: number | null;
      /** Format: int64 */
      startTime: number;
    };
    CheckpointCollection: {
      data: (components["schemas"]["Checkpoint"])[];
      hasMore: boolean;
    };
    Connector: {
      connectionConfig?: string | null;
      customSchemas: boolean;
      description: string;
      enabled: boolean;
      hidden: boolean;
      icon: string;
      id: string;
      name: string;
      sink: boolean;
      source: boolean;
      tableConfig: string;
      testing: boolean;
    };
    ConnectorCollection: {
      data: (components["schemas"]["Connector"])[];
      hasMore: boolean;
    };
    Job: {
      /** Format: int64 */
      createdAt: number;
      failureMessage?: string | null;
      /** Format: int64 */
      finishTime?: number | null;
      id: string;
      /** Format: int64 */
      runId: number;
      runningDesired: boolean;
      /** Format: int64 */
      startTime?: number | null;
      state: string;
      /** Format: int64 */
      tasks?: number | null;
    };
    JobCollection: {
      data: (components["schemas"]["Job"])[];
      hasMore: boolean;
    };
    /** @enum {string} */
    JobLogLevel: "info" | "warn" | "error";
    JobLogMessage: {
      /** Format: int64 */
      createdAt: number;
      details: string;
      level: components["schemas"]["JobLogLevel"];
      message: string;
      operatorId?: string | null;
      /** Format: int64 */
      taskIndex?: number | null;
    };
    JobLogMessageCollection: {
      data: (components["schemas"]["JobLogMessage"])[];
      hasMore: boolean;
    };
    Metric: {
      /** Format: int64 */
      time: number;
      /** Format: double */
      value: number;
    };
    MetricGroup: {
      name: components["schemas"]["MetricNames"];
      subtasks: (components["schemas"]["SubtaskMetrics"])[];
    };
    /** @enum {string} */
    MetricNames: "bytes_recv" | "bytes_sent" | "messages_recv" | "messages_sent" | "backpressure";
    OperatorMetricGroup: {
      metricGroups: (components["schemas"]["MetricGroup"])[];
      operatorId: string;
    };
    OperatorMetricGroupCollection: {
      data: (components["schemas"]["OperatorMetricGroup"])[];
      hasMore: boolean;
    };
    OutputData: {
      key: string;
      operatorId: string;
      /** Format: int64 */
      timestamp: number;
      value: string;
    };
    Pipeline: {
      action?: components["schemas"]["StopType"] | null;
      actionInProgress: boolean;
      actionText: string;
      /** Format: int64 */
      checkpointIntervalMicros: number;
      /** Format: int64 */
      createdAt: number;
      graph: components["schemas"]["PipelineGraph"];
      id: string;
      name: string;
      preview: boolean;
      query: string;
      stop: components["schemas"]["StopType"];
      udfs: (components["schemas"]["Udf"])[];
    };
    PipelineCollection: {
      data: (components["schemas"]["Pipeline"])[];
      hasMore: boolean;
    };
    PipelineEdge: {
      destId: string;
      edgeType: string;
      keyType: string;
      srcId: string;
      valueType: string;
    };
    PipelineGraph: {
      edges: (components["schemas"]["PipelineEdge"])[];
      nodes: (components["schemas"]["PipelineNode"])[];
    };
    PipelineNode: {
      nodeId: string;
      operator: string;
      /** Format: int32 */
      parallelism: number;
    };
    PipelinePatch: {
      /** Format: int64 */
      checkpointIntervalMicros?: number | null;
      /** Format: int64 */
      parallelism?: number | null;
      stop?: components["schemas"]["StopType"] | null;
    };
    PipelinePost: {
      name: string;
      /** Format: int64 */
      parallelism: number;
      preview?: boolean | null;
      query: string;
      udfs: (components["schemas"]["Udf"])[];
    };
    /** @enum {string} */
    StopType: "none" | "checkpoint" | "graceful" | "immediate" | "force";
    SubtaskMetrics: {
      /** Format: int32 */
      idx: number;
      metrics: (components["schemas"]["Metric"])[];
    };
    Udf: {
      definition: string;
      language: components["schemas"]["UdfLanguage"];
    };
    /** @enum {string} */
    UdfLanguage: "rust";
    ValidatePipelinePost: {
      query: string;
      udfs: (components["schemas"]["Udf"])[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * List all connectors 
   * @description List all connectors
   */
  get_connectors: {
    responses: {
      /** @description Got connectors collection */
      200: {
        content: {
          "application/json": components["schemas"]["ConnectorCollection"];
        };
      };
    };
  };
  /**
   * Get all jobs 
   * @description Get all jobs
   */
  get_jobs: {
    responses: {
      /** @description Get all jobs */
      200: {
        content: {
          "application/json": components["schemas"]["JobCollection"];
        };
      };
    };
  };
  ping: {
    responses: {
      /** @description Ping endpoint */
      200: never;
    };
  };
  /**
   * List all pipelines 
   * @description List all pipelines
   */
  get_pipelines: {
    responses: {
      /** @description Got pipelines collection */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineCollection"];
        };
      };
    };
  };
  /**
   * Create a new pipeline 
   * @description Create a new pipeline
   * 
   * The API will create a single job for the pipeline.
   */
  post_pipeline: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PipelinePost"];
      };
    };
    responses: {
      /** @description Created pipeline and job */
      200: {
        content: {
          "application/json": components["schemas"]["Pipeline"];
        };
      };
    };
  };
  /**
   * Get a pipeline graph 
   * @description Get a pipeline graph
   */
  validate_pipeline: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ValidatePipelinePost"];
      };
    };
    responses: {
      /** @description Created pipeline and job */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineGraph"];
        };
      };
    };
  };
  /**
   * Get a single pipeline 
   * @description Get a single pipeline
   */
  get_pipeline: {
    parameters: {
      path: {
        /** @description Pipeline id */
        id: string;
      };
    };
    responses: {
      /** @description Got pipeline */
      200: {
        content: {
          "application/json": components["schemas"]["Pipeline"];
        };
      };
    };
  };
  /**
   * Delete a pipeline 
   * @description Delete a pipeline
   */
  delete_pipeline: {
    parameters: {
      path: {
        /** @description Pipeline id */
        id: string;
      };
    };
    responses: {
      /** @description Deleted pipeline */
      200: never;
    };
  };
  /**
   * Update a pipeline 
   * @description Update a pipeline
   */
  patch_pipeline: {
    parameters: {
      path: {
        /** @description Pipeline id */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PipelinePatch"];
      };
    };
    responses: {
      /** @description Updated pipeline */
      200: {
        content: {
          "application/json": components["schemas"]["Pipeline"];
        };
      };
    };
  };
  /**
   * List a pipeline's jobs 
   * @description List a pipeline's jobs
   */
  get_pipeline_jobs: {
    parameters: {
      path: {
        /** @description Pipeline id */
        id: string;
      };
    };
    responses: {
      /** @description Got jobs collection */
      200: {
        content: {
          "application/json": components["schemas"]["JobCollection"];
        };
      };
    };
  };
  /**
   * List a job's checkpoints 
   * @description List a job's checkpoints
   */
  get_job_checkpoints: {
    parameters: {
      path: {
        /** @description Pipeline id */
        pipeline_id: string;
        /** @description Job id */
        job_id: string;
      };
    };
    responses: {
      /** @description Got job's checkpoints */
      200: {
        content: {
          "application/json": components["schemas"]["CheckpointCollection"];
        };
      };
    };
  };
  /**
   * List a job's error messages 
   * @description List a job's error messages
   */
  get_job_errors: {
    parameters: {
      path: {
        /** @description Pipeline id */
        pipeline_id: string;
        /** @description Job id */
        job_id: string;
      };
    };
    responses: {
      /** @description Got job's error messages */
      200: {
        content: {
          "application/json": components["schemas"]["JobLogMessageCollection"];
        };
      };
    };
  };
  /**
   * Get a job's metrics 
   * @description Get a job's metrics
   */
  get_operator_metric_groups: {
    parameters: {
      path: {
        /** @description Pipeline id */
        pipeline_id: string;
        /** @description Job id */
        job_id: string;
      };
    };
    responses: {
      /** @description Got metric groups */
      200: {
        content: {
          "application/json": components["schemas"]["OperatorMetricGroupCollection"];
        };
      };
    };
  };
  /**
   * Subscribe to a job's output 
   * @description Subscribe to a job's output
   */
  get_job_output: {
    parameters: {
      path: {
        /** @description Pipeline id */
        pipeline_id: string;
        /** @description Job id */
        job_id: string;
      };
    };
    responses: {
      /** @description Job output as 'text/event-stream' */
      200: never;
    };
  };
}
